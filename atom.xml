<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Tikitoo Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://tikitoo.github.io//"/>
  <updated>2016-05-26T23:30:31.108Z</updated>
  <id>http://tikitoo.github.io//</id>
  
  <author>
    <name><![CDATA[Tikitoo]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[知道Android 中Gradle 的这些技巧，提升编译构建速度]]></title>
    <link href="http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/"/>
    <id>http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/</id>
    <published>2016-05-26T00:15:41.000Z</published>
    <updated>2016-05-26T23:30:31.108Z</updated>
    <content type="html"><![CDATA[<p>不过有些事情我们是不得不承认的，Android Studio 越升级越卡顿有木有，每次升级都说有黑科技，但每次都被当做小白鼠，最后只能降版本保智商，每次构建，都要刷个干货群，刷个知乎才能完成，有时候代码改了运行了没有生效有木有？？？现在越来越觉得Google 不靠谱了（这么大胆黑谷歌会不会被喷死！！！）。好吧吐槽完了，下面切入正题，最后还是要自己去填坑。</p>
<p>现在基本上都使用Android Studio 来开发，使用Gradle 构建项目，Gradle 的种种优点，多渠道打包方便，依赖类库统一管理，基于Groovy 的DSL 语言简洁方便。这些好处在我们开发省了我们不少事，但是唯一的问题就是编译构建运行的时候特别慢，甚至是致命的，最后发现加班的时间都浪费在编译构建上（说多了都是泪）。</p>
<p>下面有几个技巧，让你你的Android Gradle 运行，编译更加快速。</p>
<h2 id="设置代理">设置代理</h2><p>因为依赖要从Jcenter/Maven 仓库上下载，但是网络还是时不时地抽风。如果你使用VPN 或者全局代码可以从本地网络配置，就不需要在Android Studio 配置了（好像并没有什么用？）。给Gradle 设置代码需要在根目录的<strong>gradle.properties</strong> 配置。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 举例ShadowSocket</span><br><span class="line">systemProp.http.proxyHost=127.0.0.1</span><br><span class="line">systemProp.http.proxyPort=1080</span><br><span class="line">systemProp.https.proxyHost=127.0.0.1</span><br><span class="line">systemProp.https.proxyPort=1080</span><br></pre></td></tr></table></figure>
<p>如果你用ShadowSocket，记得在本地开启。如果你使用其他代理软件，也类似，会有主机和端口。</p>
<h2 id="更新Gradle，设置离线状态">更新Gradle，设置离线状态</h2><p>Android Studio 的版本一般都跟随着Gradle 的版本，在安装目录的根目录有个<strong>gradle</strong> 目录，就是最新版，我们可以在设置中打开Gradle，选择Use local gradle distribution，然后选择Gradle 的目录即可，这样就不会每次根据项目中./gradle/xxx 中的gradle 版本每次再下载。理论上Gradle 的版本越新构建运行越快，也只是理论上，所以推荐稳定版的版本。</p>
<p><img src="http://ww3.sinaimg.cn/large/68622377gw1f480c56owej20z50dedj1.jpg" alt=""></p>
<p>如果需要使用命令行编译，可以配置<strong>—daemon —parallel —offline</strong>。</p>
<p><img src="http://ww3.sinaimg.cn/large/68622377gw1f480znt81ij20z50dutd3.jpg" alt=""></p>
<h2 id="守护进程，并行编译">守护进程，并行编译</h2><p>在项目的根目录中有一个<strong>gradle.properties</strong> 文件，</p>
<p><img src="http://ww3.sinaimg.cn/large/68622377gw1f480bomjc0j20ry0am42c.jpg" alt=""></p>
<p><strong>org.gradle.daemon=true</strong> 就是让你让你编译时使用守护进程。</p>
<p><strong>org.gradle.parallel=true</strong> 使用并行编译</p>
<p><strong>org.gradle.jvmargs=-Xmx2048m</strong> JVM最大允许分配的堆内存，按需分配</p>
<p><strong>-XX:MaxPermSize=512m</strong> JVM最大允许分配的非堆内存，按需分配</p>
<p>当然你也可以在下面的目录下面创建<code>gradle.properties</code> ，来配置全局的属性，在所有的项目中起作用。</p>
<ul>
<li><code>/home//.gradle/</code> (Linux)</li>
<li><code>/Users//.gradle/</code> (Mac)</li>
<li><code>C:\Users\\.gradle</code> (Windows)</li>
</ul>
<p>当然也可以修改<strong>xxx\android studio 安装目录\bin\studio64.exe.vmoptions</strong> 文件来配置JVM 的相关的参数。</p>
<h2 id="开发使用SDK=21">开发使用SDK=21</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">    productFlavors &#123;</span><br><span class="line">        dev &#123;</span><br><span class="line">            minSdkVersion <span class="number">21</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        release &#123;</span><br><span class="line">            minSdkVersion <span class="number">14</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们都知道当API 不小于21，使用 ART，在 Build 时只做 class to dex，不做 mergeing dex，会省下大量的时间。</p>
<h2 id="使用aar依赖">使用aar依赖</h2><p>我们都知道我们或多或少使用第三方的开源库或者工具，还有自己封装的类库，但是一次编译的时候在<strong>Library Module</strong> 目录下， 打开<strong>build/outputs/aar</strong>，就有生成的aar 文件。把他放在<strong>libs</strong> 目录下，在build.gradle 添加。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">   repositories &#123;</span><br><span class="line">      jcenter()</span><br><span class="line">      flatDir &#123;</span><br><span class="line">        dirs <span class="string">'libs'</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="symbol">name:</span><span class="string">'cards'</span>, <span class="symbol">ext:</span><span class="string">'aar'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>当然也可以这样添加</strong></p>
<p>我们可以新建一个jar/aar Module，选择aar 文件，然后新建的Module 目录下，就会多了个build.gradle 和xxx.aar。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configurations.maybeCreate(<span class="string">"default"</span>)</span><br><span class="line">artifacts.add(<span class="string">"default"</span>, file(<span class="string">'mylibrary-debug.aar'</span>))</span><br></pre></td></tr></table></figure>
<p>然后在我们的Module 中这样引用即可。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile project(':mylibrary-debug')</span><br></pre></td></tr></table></figure>
<h2 id="dexOptions">dexOptions</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classpath <span class="string">'com.android.tools.build:gradle:2.0.0-alpha9'</span></span><br></pre></td></tr></table></figure>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Default value: -Xmx10248m -XX:MaxPermSize=256m</span></span><br><span class="line">org.gradle.jvmargs=-<span class="constant">Xmx4g</span> -<span class="constant">XX</span><span class="symbol">:MaxPermSize=</span><span class="number">512</span>m</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dexOptions &#123;&#10;    preDexLibraries true&#10;    javaMaxHeapSize &#34;3g&#34;&#10;    incremental true&#10;    dexInProcess = true&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>这里是参考stackoverflow 上的，好像有Bug，作者本人试了Android gradle 的版本至少是<strong>2.0.0-alpha9</strong>，然后配置一些参数。这里为JVM 设置4G，给Dex 设置3G。</p>
<h2 id="参考">参考</h2><ul>
<li><a href="http://stackoverflow.com/questions/35224255/to-run-dex-in-process-the-gradle-daemon-needs-a-larger-heap-it-currently-has-9" target="_blank" rel="external">android - To run dex in process, the Gradle daemon needs a larger heap. It currently has 910 MB | Stack Overflow</a></li>
<li><a href="http://stackoverflow.com/questions/16682847/how-to-manually-include-external-aar-package-using-new-gradle-android-build-syst" target="_blank" rel="external">How to manually include external aar package using new Gradle Android Build System | Stack Overflow</a></li>
<li><a href="http://www.devtf.cn/?p=585" target="_blank" rel="external">优化android studio编译效率的方法 | 开发技术前线</a></li>
<li><a href="http://blog.isming.me/2015/03/18/android-build-speed-up/" target="_blank" rel="external">加速Android Studio/Gradle构建 | 码农明明桑</a></li>
<li><a href="http://stackoverflow.com/questions/21882804/adding-local-aar-files-to-my-gradle-build" target="_blank" rel="external">android - Adding local .aar files to my gradle build | Stack Overflow</a></li>
<li><a href="http://stormzhang.com/android/2015/03/01/android-reference-local-aar/" target="_blank" rel="external">Android模块化编程之引用本地的aar | Stormzhang</a></li>
</ul>
<blockquote>
<p>本文译者：<a href="http://weibo.com/lyf0306" target="_blank" rel="external">Tikitoo</a><br>原文链接：<a href="http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster">http://tikitoo.github.io/2016/05/26/android-studio-gradle-build-run-faster/</a><br>非商业转载转载请在开头注明<code>作者详细信息</code>和<code>本文出处</code>，以及本文所有内容。</p>
<p>本文首发我的微信公众号，分享<code>Android 开发</code>和<code>互联网内容</code>。<br>微信号：<code>AndroidMate</code><br>公众号：<code>安卓同学</code><br><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>不过有些事情我们是不得不承认的，Android Studio 越升级越卡顿有木有，每次升级都说有黑科技，但每次都被当做小白鼠，最后只能降版本保智商，每次构建，都要刷个干货群，刷个知乎才能完成，有时候代码改了运行了没有生效有木有？？？现在越来越觉得Google 不靠谱了（这么]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://tikitoo.github.io/tags/Android-Studio/"/>
    
      <category term="Gradle" scheme="http://tikitoo.github.io/tags/Gradle/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Medium Android 客户端都使用了哪些开源项目？]]></title>
    <link href="http://tikitoo.github.io/2016/05/24/medium-android-tools-zh/"/>
    <id>http://tikitoo.github.io/2016/05/24/medium-android-tools-zh/</id>
    <published>2016-05-24T00:15:41.000Z</published>
    <updated>2016-05-23T13:52:05.039Z</updated>
    <content type="html"><![CDATA[<p>Medium 是一个写作的平台，他的创始人也创立了Twitter，Square（JakeWharton 大神所在的公司），这篇文章是Medium 的Android工程师<a href="https://medium.com/@dmccartney" target="_blank" rel="external">Daniel McCartney</a> 分享了他们Android App 使用的开源项目。</p>
<p><a href="https://source.android.com/" target="_blank" rel="external">Android Open Source Project</a><br>你可以把Android 平台修改构建成你所需要的。当然你也可以提交贡献代码。</p>
<p><a href="https://github.com/google/guava" target="_blank" rel="external">google/guava</a><br>Guava 是支持Java 6+ 的Googel 核心类库，它包括集合类，缓存，并发库，通用注解等等。</p>
<p><a href="https://github.com/google/dagger" target="_blank" rel="external">google/dagger  </a><br>Dagger 2 是一个快速的依赖注入库，它使用APT 的方式在编译时生成代码，在牺牲了微小代价的情况下，使项目架构更加整洁。</p>
<p><a href="https://github.com/square/retrofit" target="_blank" rel="external">square/retrofit  </a><br>Retrofit 是一个类型安全的Rest 风格的类库，它通过注解的方式来实现网络请求。</p>
<p><a href="https://github.com/square/okhttp" target="_blank" rel="external">square/okhttp  </a><br>OkHttp 是一个HTTP + SPDY 的网络请求库。</p>
<p><a href="https://github.com/FasterXML/jackson" target="_blank" rel="external">FasterXML/jackson  </a><br>Jackson 是一个Json 解析和生成库。</p>
<p><a href="https://github.com/square/otto" target="_blank" rel="external">square/otto  </a><br>Otto 是一个基于Guava 项目实现的事件总线的类库。</p>
<p><a href="https://github.com/bumptech/glide" target="_blank" rel="external">bumptech/glide  </a><br>Glide 是一个图片加载和缓存库，它主要专注于平滑滚动。</p>
<p><a href="https://github.com/square/phrase" target="_blank" rel="external">square/phrase  </a><br>Phrase 是一个Android 字符串资源模板类库。</p>
<p><a href="https://github.com/JakeWharton/butterknife/" target="_blank" rel="external">JakeWharton/butterknife</a><br>ButterKnife 是一个View 注入类库。</p>
<p><a href="https://github.com/chrisjenx/Calligraphy" target="_blank" rel="external">chrisjenx/Calligraphy  </a><br>Calligraphy 是一个自定义字体的类库。</p>
<p><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">JakeWharton/hugo</a><br>Hugo 是一个通过注解的方法来实现日志功能的类库。</p>
<p><a href="https://github.com/mockito/mockito" target="_blank" rel="external">mockito/mockito</a><br>Mockito 是一个Java 的Mocking 单元测试框架。</p>
<p><a href="https://github.com/robolectric/robolectric" target="_blank" rel="external">robolectric/robolectric</a><br>robolectric 是一个Android 的单元测试框架。</p>
<p><a href="https://github.com/JakeWharton/sdk-manager-plugin" target="_blank" rel="external">JakeWharton/sdk-manager-plugin</a><br>sdk-manager-plugin 是用来下载和管理你的Android SDK的Gradle 插件。</p>
<hr>
<p>下面还有很多第三方的工具，可以让你的App 大放异彩。</p>
<p><a href="https://github.com/facebook/facebook-android-sdk" target="_blank" rel="external">facebook/facebook-android-sdk</a><br>facebook-android-sdk 是集成Facebook 平台用于Android 的SDK。</p>
<p><a href="http://fabric.io/" target="_blank" rel="external">Fabric</a><br>Fabric 是Twitter 移动开发平台，它集成了一系列好用的工具，比如分析，崩溃捕获等等。</p>
<p><a href="https://developer.android.com/google/" target="_blank" rel="external">Google Services | Android Developers</a><br>利用Google 最新的技术，只需要简单的API，实现很多强大的功能。</p>
<hr>
<blockquote>
<p>本文作者：<a href="https://medium.com/@dmccartney" target="_blank" rel="external">Daniel McCartney</a><br>本文译者：<a href="http://weibo.com/lyf0306" target="_blank" rel="external">Tikitoo</a><br>原文链接：<a href="https://medium.engineering/medium-android-tools-f827bb96b8e4" target="_blank" rel="external">https://medium.engineering/medium-android-tools-f827bb96b8e4</a><br>翻译链接：<a href="http://tikitoo.github.io/2016/05/24/medium-android-tools-zh/">http://tikitoo.github.io/2016/05/24/medium-android-tools-zh/</a><br>非商业转载转载请在开头注明<code>作者详细信息</code>和<code>本文出处</code>，以及本文所有内容。</p>
<p>本文首发我的微信公众号，分享<code>Android 开发</code>和<code>互联网内容</code>。<br>微信号：<code>AndroidMate</code><br>公众号：<code>安卓同学</code><br><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>Medium 是一个写作的平台，他的创始人也创立了Twitter，Square（JakeWharton 大神所在的公司），这篇文章是Medium 的Android工程师<a href="https://medium.com/@dmccartney" target="_bla]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="开源项目" scheme="http://tikitoo.github.io/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="翻译" scheme="http://tikitoo.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[教你写一个炫酷的Material Design 风格的登录和注册页面]]></title>
    <link href="http://tikitoo.github.io/2016/05/17/beautiful-android-login-and-signup-screens-with-material-design-zh/"/>
    <id>http://tikitoo.github.io/2016/05/17/beautiful-android-login-and-signup-screens-with-material-design-zh/</id>
    <published>2016-05-17T13:58:41.000Z</published>
    <updated>2016-05-17T13:55:19.667Z</updated>
    <content type="html"><![CDATA[<p>每个人都会喜欢漂亮的登录界面，一个App 给人们的第一印象是非常重要的。</p>
<p>这篇文章将教你使用谷歌材料设计规范（<a href="https://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Material design spec</a> ）和谷歌的新的设计支持库（ <a href="https://developer.android.com/tools/support-library/index.html" target="_blank" rel="external">design support library</a>）来创建一个炫酷的登录和注册界面。设计支持库实现了材料设计规范的一部分，它包含了一部分炫酷的UI 部件，让你的Android 应用给人一种优雅的感觉。</p>
<p>对事物的设计和布局方面，如何做到让人感觉到屏幕上的内容是赏心悦目的，这里我们要权衡的的重点，我们会在顶部状态栏添加精细的触摸事件，并使用设计支持库的<a href="http://www.google.com/design/spec/components/text-fields.html#text-fields-floating-labels" target="_blank" rel="external">floating labels</a> （实现自TextInputLayout）。</p>
<p>几乎所有的事情都都已经照顾到你。</p>
<ul>
<li>完整的代码和样例托管在Github</li>
<li>当接口锁定时，防止后退按钮显示在登录Activity 上。</li>
<li>自定义 <code>ProgressDialog</code>来显示加载的状态。</li>
<li>符合材料设计规范。</li>
<li>悬浮标签（<a href="http://www.google.com/design/spec/components/text-fields.html#text-fields-floating-labels" target="_blank" rel="external">floating labels</a>）（来自设计支持库）</li>
<li>用户表单输入校验</li>
<li>自定义状态栏样式</li>
<li>在每一个Activity 测试模仿验证的方法。</li>
</ul>
<p>剩下的就是实现自己的身份验证逻辑。</p>
<p><a href="https://github.com/sourcey/materiallogindemo" target="_blank" rel="external"> 获取源码</a></p>
<h2 id="登录Activity">登录Activity</h2><p>让我们来设置登录Activity，通常是开始你的应用程序，会显示给用户的第一个要启动的Activity。</p>
<p><img src="http://sourcey.com/beautiful-android-logn-and-signup-screens-with-material-design/screenshot-login.png" width="360" height="640"></p>
<p>如果你想要添加社交登录按钮，请继续，但是当前在这个文章范围内，只给你基本的代码，让你有一个坚固的起点去构建你的验证流程。</p>
<p>需要注意的是 <code>onBackPressed</code> 方法将会被重写，这样将会防止用户关闭登录Activity。</p>
<h4 id="LoginActivity-java">LoginActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sourcey.materiallogindemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.ProgressDialog;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> butterknife.ButterKnife;</span><br><span class="line"><span class="keyword">import</span> butterknife.InjectView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"LoginActivity"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_SIGNUP = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.input_email) EditText _emailText;</span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.input_password) EditText _passwordText;</span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.btn_login) Button _loginButton;</span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.link_signup) TextView _signupLink;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_login);</span><br><span class="line">        ButterKnife.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        _loginButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                login();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        _signupLink.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Start the Signup activity</span></span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(getApplicationContext(), SignupActivity.class);</span><br><span class="line">                startActivityForResult(intent, REQUEST_SIGNUP);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"Login"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!validate()) &#123;</span><br><span class="line">            onLoginFailed();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _loginButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ProgressDialog progressDialog = <span class="keyword">new</span> ProgressDialog(LoginActivity.<span class="keyword">this</span>,</span><br><span class="line">                R.style.AppTheme_Dark_Dialog);</span><br><span class="line">        progressDialog.setIndeterminate(<span class="keyword">true</span>);</span><br><span class="line">        progressDialog.setMessage(<span class="string">"Authenticating..."</span>);</span><br><span class="line">        progressDialog.show();</span><br><span class="line"></span><br><span class="line">        String email = _emailText.getText().toString();</span><br><span class="line">        String password = _passwordText.getText().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO</span>: Implement your own authentication logic here.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> android.os.Handler().postDelayed(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// On complete call either onLoginSuccess or onLoginFailed</span></span><br><span class="line">                        onLoginSuccess();</span><br><span class="line">                        <span class="comment">// onLoginFailed();</span></span><br><span class="line">                        progressDialog.dismiss();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_SIGNUP) &#123;</span><br><span class="line">            <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// <span class="doctag">TODO</span>: Implement successful signup logic here</span></span><br><span class="line">                <span class="comment">// By default we just finish the Activity and log them in automatically</span></span><br><span class="line">                <span class="keyword">this</span>.finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// disable going back to the MainActivity</span></span><br><span class="line">        moveTaskToBack(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        _loginButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoginFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Toast.makeText(getBaseContext(), <span class="string">"Login failed"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line">        _loginButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        String email = _emailText.getText().toString();</span><br><span class="line">        String password = _passwordText.getText().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) &#123;</span><br><span class="line">            _emailText.setError(<span class="string">"enter a valid email address"</span>);</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _emailText.setError(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (password.isEmpty() || password.length() &lt; <span class="number">4</span> || password.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            _passwordText.setError(<span class="string">"between 4 and 10 alphanumeric characters"</span>);</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _passwordText.setError(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://sourcey.com/beautiful-android-logn-and-signup-screens-with-material-design/screenshot-login-spinner.png" width="360" height="640"></p>
<h4 id="res/layout/activity_login-xml">res/layout/activity_login.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ScrollView</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:fitsSystemWindows</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:paddingTop</span>=<span class="value">"56dp"</span></span><br><span class="line">        <span class="attribute">android:paddingLeft</span>=<span class="value">"24dp"</span></span><br><span class="line">        <span class="attribute">android:paddingRight</span>=<span class="value">"24dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:src</span>=<span class="value">"@drawable/logo"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"72dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"24dp"</span></span><br><span class="line">            <span class="attribute">android:layout_gravity</span>=<span class="value">"center_horizontal"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Email Label --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.design.widget.TextInputLayout</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginTop</span>=<span class="value">"8dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"8dp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:id</span>=<span class="value">"@+id/input_email"</span></span><br><span class="line">                <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">                <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">                <span class="attribute">android:inputType</span>=<span class="value">"textEmailAddress"</span></span><br><span class="line">                <span class="attribute">android:hint</span>=<span class="value">"Email"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Password Label --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.design.widget.TextInputLayout</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginTop</span>=<span class="value">"8dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"8dp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:id</span>=<span class="value">"@+id/input_password"</span></span><br><span class="line">                <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">                <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">                <span class="attribute">android:inputType</span>=<span class="value">"textPassword"</span></span><br><span class="line">                <span class="attribute">android:hint</span>=<span class="value">"Password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.v7.widget.AppCompatButton</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/btn_login"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginTop</span>=<span class="value">"24dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"24dp"</span></span><br><span class="line">            <span class="attribute">android:padding</span>=<span class="value">"12dp"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"Login"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:id</span>=<span class="value">"@+id/link_signup"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"24dp"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"No account yet? Create one"</span></span><br><span class="line">            <span class="attribute">android:gravity</span>=<span class="value">"center"</span></span><br><span class="line">            <span class="attribute">android:textSize</span>=<span class="value">"16dip"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注册_Activity">注册 Activity</h2><p>注册Activity 可以让你在App 中创建一个用户，通常会在登录Activity 中显示（注册的）链接。</p>
<p><img src="http://sourcey.com/beautiful-android-logn-and-signup-screens-with-material-design/screenshot-signup.png" width="360" height="640"></p>
<p>需要注意的是当用户注册成功时我们会设置一个<code>RESULT_OK</code> 的结果值，这个结果将会在登录Activity 中的 <code>onActivityResult</code> 方法中调用，并且确定注册成功是如何处理的。当前逻辑是很简单的，当用户注册成功时我们会马上做一个记录。当然你想要实现邮箱验证，你需要自己来实现。</p>
<h4 id="SignupActivity-java">SignupActivity.java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sourcey.materiallogindemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.ProgressDialog;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> butterknife.ButterKnife;</span><br><span class="line"><span class="keyword">import</span> butterknife.InjectView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignupActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"SignupActivity"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.input_name) EditText _nameText;</span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.input_email) EditText _emailText;</span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.input_password) EditText _passwordText;</span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.btn_signup) Button _signupButton;</span><br><span class="line">    <span class="annotation">@Bind</span>(R.id.link_login) TextView _loginLink;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_signup);</span><br><span class="line">        ButterKnife.inject(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        _signupButton.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                signup();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        _loginLink.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// Finish the registration screen and return to the Login activity</span></span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">signup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"Signup"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!validate()) &#123;</span><br><span class="line">            onSignupFailed();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _signupButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ProgressDialog progressDialog = <span class="keyword">new</span> ProgressDialog(SignupActivity.<span class="keyword">this</span>,</span><br><span class="line">                R.style.AppTheme_Dark_Dialog);</span><br><span class="line">        progressDialog.setIndeterminate(<span class="keyword">true</span>);</span><br><span class="line">        progressDialog.setMessage(<span class="string">"Creating Account..."</span>);</span><br><span class="line">        progressDialog.show();</span><br><span class="line"></span><br><span class="line">        String name = _nameText.getText().toString();</span><br><span class="line">        String email = _emailText.getText().toString();</span><br><span class="line">        String password = _passwordText.getText().toString();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">TODO</span>: Implement your own signup logic here.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> android.os.Handler().postDelayed(</span><br><span class="line">                <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="comment">// On complete call either onSignupSuccess or onSignupFailed</span></span><br><span class="line">                        <span class="comment">// depending on success</span></span><br><span class="line">                        onSignupSuccess();</span><br><span class="line">                        <span class="comment">// onSignupFailed();</span></span><br><span class="line">                        progressDialog.dismiss();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSignupSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        _signupButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        setResult(RESULT_OK, <span class="keyword">null</span>);</span><br><span class="line">        finish();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSignupFailed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Toast.makeText(getBaseContext(), <span class="string">"Login failed"</span>, Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line">        _signupButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        String name = _nameText.getText().toString();</span><br><span class="line">        String email = _emailText.getText().toString();</span><br><span class="line">        String password = _passwordText.getText().toString();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (name.isEmpty() || name.length() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            _nameText.setError(<span class="string">"at least 3 characters"</span>);</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _nameText.setError(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (email.isEmpty() || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) &#123;</span><br><span class="line">            _emailText.setError(<span class="string">"enter a valid email address"</span>);</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _emailText.setError(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (password.isEmpty() || password.length() &lt; <span class="number">4</span> || password.length() &gt; <span class="number">10</span>) &#123;</span><br><span class="line">            _passwordText.setError(<span class="string">"between 4 and 10 alphanumeric characters"</span>);</span><br><span class="line">            valid = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            _passwordText.setError(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> valid;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="res/layout/activity_signup-xml">res/layout/activity_signup.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ScrollView</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"fill_parent"</span></span><br><span class="line">    <span class="attribute">android:fitsSystemWindows</span>=<span class="value">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:paddingTop</span>=<span class="value">"56dp"</span></span><br><span class="line">        <span class="attribute">android:paddingLeft</span>=<span class="value">"24dp"</span></span><br><span class="line">        <span class="attribute">android:paddingRight</span>=<span class="value">"24dp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:src</span>=<span class="value">"@drawable/logo"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"72dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"24dp"</span></span><br><span class="line">            <span class="attribute">android:layout_gravity</span>=<span class="value">"center_horizontal"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  Name Label --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.design.widget.TextInputLayout</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginTop</span>=<span class="value">"8dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"8dp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:id</span>=<span class="value">"@+id/input_name"</span></span><br><span class="line">                <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">                <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">                <span class="attribute">android:inputType</span>=<span class="value">"textCapWords"</span></span><br><span class="line">                <span class="attribute">android:hint</span>=<span class="value">"Name"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Email Label --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.design.widget.TextInputLayout</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginTop</span>=<span class="value">"8dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"8dp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:id</span>=<span class="value">"@+id/input_email"</span></span><br><span class="line">                <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">                <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">                <span class="attribute">android:inputType</span>=<span class="value">"textEmailAddress"</span></span><br><span class="line">                <span class="attribute">android:hint</span>=<span class="value">"Email"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Password Label --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.design.widget.TextInputLayout</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginTop</span>=<span class="value">"8dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"8dp"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:id</span>=<span class="value">"@+id/input_password"</span></span><br><span class="line">                <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">                <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">                <span class="attribute">android:inputType</span>=<span class="value">"textPassword"</span></span><br><span class="line">                <span class="attribute">android:hint</span>=<span class="value">"Password"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">android.support.design.widget.TextInputLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Signup Button --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">android.support.v7.widget.AppCompatButton</span></span><br><span class="line">            <span class="attribute">android:id</span>=<span class="value">"@+id/btn_signup"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginTop</span>=<span class="value">"24dp"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"24dp"</span></span><br><span class="line">            <span class="attribute">android:padding</span>=<span class="value">"12dp"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"Create Account"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:id</span>=<span class="value">"@+id/link_login"</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"fill_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_marginBottom</span>=<span class="value">"24dp"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"Already a member? Login"</span></span><br><span class="line">            <span class="attribute">android:gravity</span>=<span class="value">"center"</span></span><br><span class="line">            <span class="attribute">android:textSize</span>=<span class="value">"16dip"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="配置">配置</h2><p>为了让程序一切正常工作，我们在需要在 <code>app</code> 目录下的 <code>build.gradle</code> 中添加一些依赖，<code>ButterKnife</code> 是可选的，当然我们更喜欢用它让我们的Java 代码更加整洁一些。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;&#10;    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])&#10;    compile &#39;com.android.support:appcompat-v7:22.2.0&#39;&#10;    compile &#39;com.android.support:design:22.2.0&#39;&#10;    compile &#39;com.jakewharton:butterknife:7.0.1&#39;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>还有一个我们必须要在<code>AndroidManifest</code> 中添加声明Activity。我已经把<code>AndroidManifest</code> 清晰完整的代码贴了出来。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="pi">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">manifest</span> <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">package</span>=<span class="value">"com.sourcey.materiallogindemo"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">uses-permission</span> <span class="attribute">android:name</span>=<span class="value">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">application</span></span><br><span class="line">        <span class="attribute">android:allowBackup</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:icon</span>=<span class="value">"@mipmap/ic_launcher"</span></span><br><span class="line">        <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span></span><br><span class="line">        <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">            <span class="attribute">android:name</span>=<span class="value">".MainActivity"</span></span><br><span class="line">            <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".LoginActivity"</span> <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.Dark"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".SignupActivity"</span> <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme.Dark"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>希望这篇文章对你是有帮助的，如果这篇文章真的节约你宝贵的开发时间，请给我留言。</p>
<hr>
<blockquote>
<p>本文作者：<a href="http://sourcey.com/" target="_blank" rel="external">sourcey</a><br>本文译者：<a href="http://weibo.com/lyf0306" target="_blank" rel="external">Tikitoo</a><br>原文链接：<a href="http://sourcey.com/beautiful-android-login-and-signup-screens-with-material-design/" target="_blank" rel="external">http://sourcey.com/beautiful-android-login-and-signup-screens-with-material-design/</a><br>翻译链接：<a href="http://tikitoo.github.io/2016/05/14/beautiful-android-login-and-signup-screens-with-material-design-zh">http://tikitoo.github.io/2016/05/14/beautiful-android-login-and-signup-screens-with-material-design-zh</a><br>非商业转载转载请在开头注明<code>作者详细信息</code>和<code>本文出处</code>，以及本文所有内容。</p>
<p>本文首发我的微信公众号，分享<code>Android 开发</code>和<code>互联网内容</code>。<br>微信号：<code>AndroidMate</code><br>公众号：<code>安卓同学</code><br><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>每个人都会喜欢漂亮的登录界面，一个App 给人们的第一印象是非常重要的。</p>
<p>这篇文章将教你使用谷歌材料设计规范（<a href="https://www.google.com/design/spec/material-design/introduction.ht]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="Material Design" scheme="http://tikitoo.github.io/tags/Material-Design/"/>
    
      <category term="翻译" scheme="http://tikitoo.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio 提示与技巧（官方文档翻译）]]></title>
    <link href="http://tikitoo.github.io/2016/05/10/android-studio-tips-and-tricks-zh/"/>
    <id>http://tikitoo.github.io/2016/05/10/android-studio-tips-and-tricks-zh/</id>
    <published>2016-05-10T14:58:41.000Z</published>
    <updated>2016-05-17T13:47:52.577Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>这是翻译官方的文档，英语好的可以直接去官方文档查看，英语不好，大家就将就看吧，算是我翻译的第一篇技术文章，因为是个英语渣，技术也渣，所以最近在学英语，就尝试着自己来翻译，不过翻译有不好的地方，大家可以指出来，我会在以后的翻译中慢慢改进。<br>以后我也会尝试者每周翻译一篇英文技术文章，如果你有好的学习英语和翻译方面的技巧，欢迎与我交流。<br>原文链接：<a href="http://developer.android.com/intl/zh-cn/sdk/installing/studio-tips.html" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/sdk/installing/studio-tips.html</a></p>
</blockquote>
<p>如果你对Android Studio 和Intellij IDEA 的界面很陌生的话，刚好这篇文章提供一些技巧，教你一些最常见的技巧来使你提高生产率。</p>
<h2 id="高效率快捷键"><a href="">高效率快捷键</a></h2><p>Android Studio 包括了许多功能，来帮助你的编程效率更高，这部分包含了一些特性帮助你快速，高效地工作。</p>
<h3 id="智能渲染">智能渲染</h3><p>使用智能渲染，Android Studio 中显示快速修复渲染的错误的链接。例如，如果你在布局文件中添加一个不指定宽和高的按钮，Android Studio 会自动会将缺少的属性显示在渲染的消息中。点击这些消息在布局中添加缺少的属性。</p>
<h3 id="在调试中渲染Bitmap">在调试中渲染Bitmap</h3><p>当你在调试中，你可以右键点击Bitmap 变量在你的App 来调用Bitmap 视图。<br>这将提取从调试的过程相关数据，并显示调试器中的Bitmap 中。<br><img src="http://ww2.sinaimg.cn/large/68622377gw1f3qmappgooj207s07q0ue.jpg" alt=""></p>
<h3 id="创建新文件">创建新文件</h3><p>你可以通过点击Project 面板中相应的文件夹中，通过输入“Alt + Insert”(Windows/Linux) ，或者Command + N(Mac)，来快速添加新的代码和资源文件。根据所选中的目录类型，Android Studio 会提供创建适当的文件类型。<br>例如，如果你选中一个布局目录，键入“Alt + Insert”（在Windows），选中布局资源文件，打开一个对话框，你可以输入一个文件的名字（可以省去.xml 后缀），然后选择根节点，编辑后会切换到设计编辑器中，你可以开始设计布局。</p>
<h3 id="输出框信息过滤">输出框信息过滤</h3><p>当你检查构建（build） 结果，你可以按照消息类型过滤消息，快速找到感兴趣的消息。<br><img src="http://ww3.sinaimg.cn/large/68622377gw1f3qkgo4054j207s07q0ue.jpg" alt=""></p>
<h3 id="父层次设置">父层次设置</h3><p>Activity 上一个Activity 可以通过在一个Activity 向导中创建一个新的Activity 中设置。设置父层次的返回按钮自动引入在你的应用中的ActionBar 中。因此返回按钮不需要在“menu.xml” 中手动指定了。</p>
<h3 id="创建布局">创建布局</h3><p>Android Studio 提供了一个高级的布局编辑器，允许你拖拽控件到你的布局中。在预览布局中编辑XML 。<br>当在编辑Text 视图中，你可以打开在窗口的右侧预览面板设置上的布局。你可以通过修改面板顶部面板改变各种选项来修改预览，包括预览设备，主题，平台版本等等，可以同时预览多个设备上布局，可以从“<strong>设备</strong>”选项中下拉”预览所有屏幕的尺寸” 的选项。</p>
<p><img src="http://ww3.sinaimg.cn/large/68622377gw1f3qmbb94eqj20qu0j83zy.jpg" alt=""></p>
<p>你可以通过点击底部的Design 窗口来切换图形编辑器。当编辑是Desin 视图时，你可以通过点击左边的窗口的面板拖拽来显示和隐藏控件。点击Designer 右边窗口的显示面板，显示布局的层次和在布局文件中每个View 的属性列表。</p>
<h3 id="注解">注解</h3><p>Android Studio 提供了 <code>Support-Annotations</code> 库帮助你在代码中使用注解，它属于支持库的一部分，添加依赖这个库可以装饰你的代码，帮助你捕获Bug，比如空指针异常，资源类型冲突，你也可以创建枚举注解，例如，从一组定义的常量中检查传入的参数值，更多请看 <a href="http://developer.android.com/tools/debugging/annotations.html#annotations" target="_blank" rel="external">改善与标注的代码检查</a>。</p>
<h3 id="Java_类反编译">Java 类反编译</h3><p>当你没有查找到源代码时，Android Studio 允许你查看Java 库里有什么。<br>内置反编译让在Android Studio 中很方便，右击一个类，方法或者字段，当你没有源文件并且选择反编译。反编译的代码会出现。要调整反编译的设置，选择 <strong>File &gt; Settings &gt; Other Settings &gt; Java Decompiler</strong>。</p>
<h3 id="调试和性能增强">调试和性能增强</h3><p>Android Studio 提供了调试和性能增强，比如：</p>
<ul>
<li>自定义快捷键，更改当前的快捷键，选择 <strong>File &gt; Settings &gt; Keymap</strong>。</li>
<li>支持高分辨率（视网膜）显示在Widnows 和Linux。</li>
<li>Scratch 文件快速原型文件，不会创造任何项目文件。<br>选择<strong>Tools &gt; New Scratch File</strong> 打开一个Scratch 文件快速构建和运行代码原型。再加上Android Studio 的代码辅助，Scratch 文件允许你快速运行和支持所有文件类型的调试代码更新。通过嵌入脚本语言创建的代码，你可以从临时文件中运行代码。</li>
</ul>
<h3 id="动态模板">动态模板</h3><p>动态模板允许你输入代码片段快速插入和完成小块的代码。插入动态模板输入模板的缩写点击Tab 键，Android Studio 中插入代码片段到相关联的代码中。</p>
<p>例如，输入 <code>newInstance</code> 缩写，按Tab 键将插入一个新初始化包括参数占位符的Fragment 。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> $fragment$ newInstance($args$) &#123;</span><br><span class="line">    $nullChecks$</span><br><span class="line">    Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">    $addArgs$</span><br><span class="line">    $fragment$ fragment = <span class="keyword">new</span> $fragment$();</span><br><span class="line">    fragment.setArguments(args);</span><br><span class="line">    <span class="keyword">return</span> fragment;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>相似的，输入 <code>fbc</code> 将插入 <code>findViewById</code> 将调用资源Id 要转换的类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">() findViewById(R.id.);</span><br></pre></td></tr></table></figure></p>
<p>用 <strong>File &gt; Settings &gt; Editor &gt; Live Templates</strong> 菜单选项来显示，支持实时模板和自定义插入代码。</p>
<h2 id="基于的IntelliJ编码实践工作"><a href="">基于的IntelliJ编码实践工作</a></h2><p>本节仅仅是一小部分代码编辑实践。当你在使用Android Studio 时你应该考虑使用它。</p>
<p>想要了解IntelliJ IDEA的界面完整的用户文档（Android Studio 是基于它的）请参考 <a href="http://www.jetbrains.com/idea/documentation/index.jsp" target="_blank" rel="external">IntelliJ IDEA 文档</a>。</p>
<h3 id="Alt_+_Enter"><em>Alt + Enter</em></h3><p>快速修复代码中的错误，强大的Intellij 实现了Alt + Enter 修复错误（遗漏的导入，变量赋值，丢失的引用等）在可能的情况下，如果不可以，选择最有可能解决问题的建议。</p>
<h3 id="Ctrl_+_D"><em>Ctrl + D</em></h3><p>Ctrl + D 是一个强大的快速复制代码行和片段，只需要选择所需的行或者片段，然后输入这个快捷键（Ctrl + D）。</p>
<h3 id="导航菜单">导航菜单</h3><p>如果你不熟悉一些API 的类，文件或者标识，导航菜单可以可以直接跳转类的方法，字段，而不需要你在手动去搜索。</p>
<h3 id="范围检查">范围检查</h3><p>代码段范围指定的更容易识别和定位的颜色，例如，你可以设定一个范围，以确定指定ActionBar 的ID。</p>
<h3 id="注入语言">注入语言</h3><p>使用嵌入语言，Android Studio 允许你在工作区中嵌入不同的语言，这个语法的延伸，错误高亮和嵌入语言的编码帮助。这对于内嵌检查正则表达式的值和验证XML 是非常有用的。</p>
<h3 id="代码折叠">代码折叠</h3><p>这让你可以选择性地隐藏和显示部分可读代码。例如资源表达式或者内嵌代码可以被折叠或隐藏成一行，使得外部的结构更加容易阅读。</p>
<h3 id="图片和颜色预览">图片和颜色预览</h3><p>当你在代码中引用图片或者图标，会在代码边上显示图片或者图标的预览（根据实际尺寸的不同密度），以帮助你验证图像或图标参考。按 <code>F1</code> 键在预览图片或者图标显示资源文件的详细信息。例如<code>dp</code> 的设置。</p>
<h3 id="快速查找文档">快速查找文档</h3><p>你可以检查使用的主题属性 <strong>View &gt; Quick Documentation</strong> (<strong>F1</strong>)，查看主题的的继承层次，并解决各种属性值。</p>
<p>如果你调用 <strong>View &gt; Quick Documentation</strong> (usually bound to F1) 来查看android:textAppearanceLarge 的主题属性值。你将会看到主题的继承层次，显示出各种属性解析值。</p>
<h3 id="快捷键">快捷键</h3><p>下表列出了常用的键盘快捷键。修改默认的快捷键可以在：<strong>File</strong> &gt; <strong>Settings</strong> &gt; <strong>Keymap</strong>（Windows/Linux）。如果你使用Mac OS X，必须更新到Mac OS X 10.5+ 的版本来使用快捷键： <strong>Android Studio &gt; Preferences &gt; Keymap</strong>。</p>
<h3 id="编程键盘命令">编程键盘命令</h3><table>
<thead>
<tr>
<th>名字</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>命令查找</td>
<td>CTRL + SHIFT + A</td>
</tr>
<tr>
<td>工程快速修复</td>
<td>ALT + ENTER</td>
</tr>
<tr>
<td>格式化代码</td>
<td>CTRL + ALT + L (Win)OPTION + CMD + L (Mac)</td>
</tr>
<tr>
<td>显示文档</td>
<td>CTRL + Q (Win)F1 (Mac)</td>
</tr>
<tr>
<td>显示选中方法的参数</td>
<td>CTRL + P</td>
</tr>
<tr>
<td>生成方法</td>
<td>ALT + Insert (Win)CMD + N (Mac)</td>
</tr>
<tr>
<td>跳转到源码</td>
<td>F4 (Win)CMD + down-arrow (Mac)</td>
</tr>
<tr>
<td>删除行</td>
<td>CTRL + Y (Win)CMD + Backspace (Mac)</td>
</tr>
<tr>
<td>通过符号名称搜索</td>
<td>CTRL + ALT + SHIFT + N (Win)OPTION + CMD + O (Mac)</td>
</tr>
</tbody>
</table>
<h3 id="工程和编辑器快捷键">工程和编辑器快捷键</h3><table>
<thead>
<tr>
<th>名字</th>
<th>快捷键</th>
</tr>
</thead>
<tbody>
<tr>
<td>构建</td>
<td>CTRL + F9 (Win)CMD + F9 (Mac)</td>
</tr>
<tr>
<td>构建和运行</td>
<td>SHIFT + F10 (Win)CTRL + R (Mac)</td>
</tr>
<tr>
<td>切换项目可见</td>
<td>ALT + 1 (Win)CMD + 1 (Mac)</td>
</tr>
<tr>
<td>导航打开的标签页</td>
<td>ALT + left-arrow; ALT + right-arrow (Win)CTRL + left-arrow; CTRL + right-arrow (Mac)</td>
</tr>
</tbody>
</table>
<p>更多的快捷键完全参考指南，请看<a href="http://www.jetbrains.com/idea/documentation/index.jsp" target="_blank" rel="external">IntelliJ IDEA</a> 文档。</p>
<hr>
<blockquote>
<p>本文作者：<a href="http://weibo.com/lyf0306" target="_blank" rel="external">Tikitoo</a><br>本文出处：<a href="http://tikitoo.github.io/2016/05/10/android-studio-tips-and-tricks-zh/">http://tikitoo.github.io/2016/05/10/android-studio-tips-and-tricks-zh</a><br>非商业转载转载请在开头注明<code>作者详细信息</code>和<code>本文出处</code>。</p>
<p>本文首发我的微信公众号，分享<code>Android 开发</code>和<code>互联网内容</code>。<br>微信号：<code>AndroidMate</code><br>公众号：<code>安卓同学</code><br><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>这是翻译官方的文档，英语好的可以直接去官方文档查看，英语不好，大家就将就看吧，算是我翻译的第一篇技术文章，因为是个英语渣，技术也渣，所以最近在学英语，就尝试着自己来翻译，不过翻译有不好的地方，大家可以指出来，我会在以后的翻译中慢慢改进。<br>以后]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://tikitoo.github.io/tags/Android-Studio/"/>
    
      <category term="翻译" scheme="http://tikitoo.github.io/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 开发值得订阅的日报和周刊]]></title>
    <link href="http://tikitoo.github.io/2016/04/26/android-worth-subscribe-daily-weekly/"/>
    <id>http://tikitoo.github.io/2016/04/26/android-worth-subscribe-daily-weekly/</id>
    <published>2016-04-26T14:58:41.000Z</published>
    <updated>2016-04-26T15:03:39.990Z</updated>
    <content type="html"><![CDATA[<p><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly </a><br>Android Weekly 是由一群国外知名的Android 开发者维护，分享的内容不仅仅只有干货，而且还有最新的技术分享，也是Android 开发圈子最早，最有名的周报。如果想看中文版，请移步知乎专栏——《<a href="http://tikitoo.me/resources/Android%20Weekly" target="_blank" rel="external">Android Weekly - 知乎专栏</a>》。</p>
<p><a href="http://www.androidweekly.cn/" target="_blank" rel="external">Android开发技术周报</a><br>Android开发技术周报是由<a href="http://weibo.com/234959219" target="_blank" rel="external">@脉脉不嘚語</a> 维护更新，截止到现在，已经发布了28 期，分享的都是高质量的文章教程，代码库，工具，新闻视频，设计等。</p>
<p><a href="http://zhuanlan.zhihu.com/andlib" target="_blank" rel="external">Android 科学院</a><br>由<a href="http://weibo.com/n/duguguiyu?from=feed&amp;loc=at" target="_blank" rel="external">@duguguiyu</a> 和豌豆荚一小撮工程师组成，分享的都是最新的Android 技术；虽然更新频率不是很高，但是质量确是很很高的，值得一看的。</p>
<p><a href="http://www.devtf.cn/?cat=2" target="_blank" rel="external">开发技术前线</a><br>开发技术前线是一个高质量技术文章的聚合网站，主要翻译国外Android，iOS 的优质文章，以及招聘等内容。</p>
<p><a href="http://app.memect.com/" target="_blank" rel="external">App开发日报</a><br>App开发日报主要关注移动应用的开发，它每天一刊，分享的内容主要来自微博上知名的开发者推荐的内容，因此质量基本上是有保证的。</p>
<p><a href="http://mobilefrontier.github.io/" target="_blank" rel="external">移动开发每周阅读清单</a><br>移动开发每周阅读清单是由InfoQ 维护更新的iOS 和Android 的周刊，它的前身是InfoQ 维护的Android 开发周刊和iOS 开发周刊，然后将两者合并组成了移动开发每周阅读清单。它不仅分享Android 的相关新闻，新工具，而且还有更加深入的，所以对于新生老人都很适合。</p>
<p><a href="http://www.race604.com/tag/Android-Weekly/" target="_blank" rel="external">Android 周报</a><br>Android 周报是由<a href="">@Android 笔记</a> 维护，目前已更新了30 期。</p>
<p><a href="http://gank.io/" target="_blank" rel="external">干货集中营</a><br>干货集中营是由代码家和一撮编辑一同维护的Android 和iOS 的日报，每天更新，当然也有妹子，算是Android 开发更新更新最频繁的。</p>
<p><a href="http://android-arsenal.com/" target="_blank" rel="external">The Android Arsenal</a><br>Android Arsenal 主要是推荐Github 上一些流行的Android 开源项目，基本上最近热门的Android 开源项目都会出现在这里，它还对不同类库进行了分类。</p>
<p><a href="http://a.codekk.com/" target="_blank" rel="external">codeKK </a><br>codeKK 是一个专门分析开源项目源码的网站，由Trinea 和一群大牛维护更新的，刚开始是一个开源项目，后来建立了独立的网站，而且也有专门的分类。而且也对一些流行的开源项目的收录。</p>
<p><a href="http://androidblog.cn/" target="_blank" rel="external">Android Blog 周刊</a><br>Android Blog 周刊 是由Jomeslu 维护更新的Android 博客周刊，截止到目前已经更新到了15 期，除了有最新的Android 开发的新闻，还有国内外博客，还有类库和人文的推荐。</p>
<p><a href="http://www.jianshu.com/collection/6e31b7354a48" target="_blank" rel="external">Android Dev</a><br>Android Dev 是由Tikitoo 维护更新的简书专栏，主要收录在简书上Android 的技术文章，目前已经收录两百篇Android 技术文章，如果你在简书写文章，欢迎去投稿。</p>
<p><a href="http://www.jianshu.com/collection/5139d555c94d" target="_blank" rel="external">Android 开发经验谈</a><br>Android 开发经验谈是由张明云 维护更新的简书专栏，目前已经收录了近千篇Android 技术文章。如果你在简书写Android 技术文章，当然可以随便投稿啦。</p>
<hr>
<p><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="【安卓同学(AndroidMate)】的公众号，更多分享..."></p>
<center>【安卓同学(AndroidMate)】的公众号，更多分享…</center>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://androidweekly.net/" target="_blank" rel="external">Android Weekly </a><br>Android Weekly 是由一群国外知名的Android 开发者维护，分享的内容不仅仅只]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="周刊" scheme="http://tikitoo.github.io/tags/%E5%91%A8%E5%88%8A/"/>
    
      <category term="日报" scheme="http://tikitoo.github.io/tags/%E6%97%A5%E6%8A%A5/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[这些小工具让你的Android 开发更高效（下）]]></title>
    <link href="http://tikitoo.github.io/2016/04/07/android_develop_tools_02/"/>
    <id>http://tikitoo.github.io/2016/04/07/android_develop_tools_02/</id>
    <published>2016-04-06T23:41:41.000Z</published>
    <updated>2016-04-20T12:49:47.862Z</updated>
    <content type="html"><![CDATA[<p><img src="http://airpair-blog.s3.amazonaws.com/wp-content/uploads/2014/09/android-tools.png" alt="Photo from [https://www.airpair.com](https://www.airpair.com/android/android-tools-every-android-developer-should-know-about)"><br>在做Android 开发过程中，会遇到一些小的问题，虽然自己动手也能解决，但是有了一些小工具，解决这些问题就得心应手了，今天就为大家推荐一下Android 开发遇到的小工具，来让你的开发更高效。</p>
<h2 id="Vysor"><a href="https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm" target="_blank" rel="external">Vysor</a></h2><hr>
<p>Vysor 是一个可以将手机的屏幕投影到电脑上，当然也可以操作，当我们做分享或者演示的时候，这个工具起到了作用。<br><img src="http://upload-images.jianshu.io/upload_images/40592-9a704beee150c2a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Vector_Asset"><a href="">Vector Asset</a></h2><hr>
<p>Android Studio 在1.4 支持了VectorAsset，所谓VectorAsset；它可以帮助你在Android 项目中添加Material Icon 和SVG 图片来作为一个Drawable 资源来使用。不过唯一一点的缺陷就是没有搜索功能，如果你想精心挑选Material Icon ，可以打来网页版<a href="https://design.google.com/icons/" target="_blank" rel="external">https://design.google.com/icons/</a> 来选择，也可以下载SVG 和Png 格式。对于VectorAsset 的好处，它的文件更小，更容易适配不同的屏幕。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-1433b4e60b8b8e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="Stetho"><a href="https://github.com/facebook/stetho" target="_blank" rel="external">Stetho</a></h2><hr>
<p>Stetho 是一个Android 开发调试小工具，它可以让你使用Chrome Develop Tools 来可以来查看Sqlite 数据库和SharePreferences，而且可以查看网络连接的数据。在Chrome 输入框输入<strong>chrome://inspect</strong>，点击inspect 就可以开始了。如果使用OkHttp 需要添加拦截器StethoInterceptor。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-9714c72797a8e3b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="OctoTree"><a href="https://github.com/buunguyen/octotree" target="_blank" rel="external">OctoTree</a></h2><hr>
<p>OctoTree 是一个浏览器插件，它可以让你在Github 看代码时，左边栏会出现一个树状结构，就像我们在IDE 一样。当我们看一个项目的结构，或者想看具体的某个文件，这样就会很方便。<br><img src="http://upload-images.jianshu.io/upload_images/40592-43298a1788b6a78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Chrome_ADB"><a href="https://chrome.google.com/webstore/detail/chromeadb/fhdoijgfljahinnpbolfdimpcfoicmnm/related" target="_blank" rel="external">Chrome ADB</a></h2><hr>
<p>Chrome ADB 是一个使用Chrome 来调试Android 的小工具，它除了提供了安装，卸载，清理数据的基本功能，而且还提供了主页，返回，锁屏的虚拟键功能，也可以看各个应用占用的内存（不得不点名批评一下微信，关闭都还占用100M 内存，不知道你要干嘛）。它还有Android 的App，两者交互一定更有意思。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-034b173b38d6b356.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="TinyPng"><a href="https://tinypng.com/" target="_blank" rel="external">TinyPng</a></h2><hr>
<p>TinyPng 是一个图片压缩工具，可能有些人感觉这个工具应该给设计师使用，我觉得也是。不过有些时候，设计师给你出了个1920* 1080 的启动页，一张图片，1M 左右，我也是泪奔了，感觉设计师说话的时间，估计我们都压缩完了，自己动手，丰衣足食。而且它还提供了API，对不同语言都还有提供了插件，比如Java 就提供了Maven 的支持。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-d0aec032399a8771.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="PostMan"><a href="https://www.getpostman.com/" target="_blank" rel="external">PostMan</a></h2><hr>
<p>PostMan 是一个API 调试工具，它提供Chrome App 和Mac App，除了提供基本的API 测试功能， 它还可以添加各种的Auth 认证，响应结果可以选择不同类型，比如HTML，JSON 等，可以设置通用的Header，还可以将之前测试的添加到一个集合，而且也可以同步到服务器，而且最近还添加了团队服务，想想服务器端写完测试你就能看到结果，而不是给你API 文档（当然API 文档还是要有的），这画面太美，我不敢想象。当然它的功能也远远不止这些，它还有专业版，想尝试更多的东西可以体验一下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-38283da81e70dd77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Genymotion_虚拟机"><a href="https://www.genymotion.com/#!/" target="_blank" rel="external">Genymotion 虚拟机</a></h2><hr>
<p>刚开始做开发的时候，每次使用官方的虚拟机，都想吐槽一下，但是发现了Genymotion 之后，这一切都变化了，它的速度几乎可以和真机媲美了，当然如果有真机，当然还是推荐使用真机测试。据说官方模拟器2.0 很快，不知道是不是又吹牛逼。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-1d7ebc1e1847ec62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Json2POJO"><a href="http://www.jsonschema2pojo.org/" target="_blank" rel="external">Json2POJO</a></h2><hr>
<p>Json2POJO 是可以将一个Json 字符串转换成Java 的POJO 类的网页工具，而且可以选择转换器，比如我们使用Retrofit 可以选择Jackson，Gson，而且可以选择重写get，set 方法，还有hashcode，equals 和toString 方法，可以省去了不少手写的时间。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-f6175994f86152fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Android_Pixel"><a href="http://androidpixels.net/" target="_blank" rel="external">Android Pixel</a></h2><hr>
<p>AndroidPixel 是一个简单的将不同的分辨率的换算工具，只要你有一个尺寸的大小，其他的尺寸大小就可以得出，当然dp 这样的单位，可以解决一部分问题，但是大多还要需要微调，这时AndroidPixel 就起到了作用。这个工具来自上一个公司同事告诉我的。</p>
<h2 id="Android_Arsenal"><a href="http://android-arsenal.com/" target="_blank" rel="external">Android Arsenal</a></h2><hr>
<p>Android Arsenal 主要是推荐Github 上一些流行的Android 开源项目，基本上最近热门的Android 开源项目都会出现在这里，它还对不同类库进行了分类。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-f6a7aded4578f6f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Codota"><a href="https://www.codota.com/" target="_blank" rel="external">Codota</a></h2><hr>
<p>Codota 是一款Android 代码搜索工具，Codota 目前已经收录超过七百万精品代码实例；具体的详细介绍请看文章《<a href="http://www.jianshu.com/p/59b89c26f9e0" target="_blank" rel="external">Android 开发工具之Codota——搜索最好的Android 代码 - 简书</a>》，而且发现好的代码段，可以自己收藏。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-6f1e985193840cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="AndroidAssetStudio"><a href="http://romannurik.github.io/AndroidAssetStudio/index.html" target="_blank" rel="external">AndroidAssetStudio</a></h2><hr>
<p>Android Asset Studio 是一个在线制作工具，它可以制作Iocn，ActionBar，点9 图等等，简单的操作，大大提高了我们开发的效率。<br><img src="http://upload-images.jianshu.io/upload_images/40592-754d22d059e1c924.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="WiFi_ADB"><a href="https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&amp;hl=zh_CN" target="_blank" rel="external">WiFi ADB</a></h2><hr>
<p>WiFi ADB 是一个通过无线网络来使电脑和手机连接的手机App（可以去Google Play 搜索类似的），当我们做测试的时候，只需在手机上打开，电脑只需在命令行输入 <code>adb connect xxx.xxx.xxx.xxx:5555</code>，电脑可以连接手机，就可以通过无线网络来调试开发的应用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-666c275c9ff35095.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="ES_Explorer"><a href="http://www.estrongs.com/" target="_blank" rel="external">ES Explorer</a></h2><hr>
<p>ES Explorer 是一款文件管理器，但实际它又不仅仅是一款文件管理器，在获得Root 之后，它的功能更强大了，它可以浏览受限制的文件目录；而且提供了一系列小工具，比如下载器；还有集成了众多云储存服务。<br><img src="http://upload-images.jianshu.io/upload_images/40592-5bcfe02e30b57743.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>是不是感觉好多都没有提到，点击下方关注我的公众号，查看下篇吧。</p>
<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-6ac98c0d478a5ae7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安卓同学(AndroidMate)的公众号，更多分享..."></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://airpair-blog.s3.amazonaws.com/wp-content/uploads/2014/09/android-tools.png" alt="Photo from [https://www.airpair.com](ht]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="Tool" scheme="http://tikitoo.github.io/tags/Tool/"/>
    
      <category term="工具" scheme="http://tikitoo.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[这些小工具让你的Android 开发更高效（上）]]></title>
    <link href="http://tikitoo.github.io/2016/03/20/android_develop_tools_01/"/>
    <id>http://tikitoo.github.io/2016/03/20/android_develop_tools_01/</id>
    <published>2016-03-20T00:54:41.000Z</published>
    <updated>2016-04-20T12:49:45.707Z</updated>
    <content type="html"><![CDATA[<p><img src="http://airpair-blog.s3.amazonaws.com/wp-content/uploads/2014/09/android-tools.png" alt="Photo from [https://www.airpair.com](https://www.airpair.com/android/android-tools-every-android-developer-should-know-about)"><br>在做Android 开发过程中，会遇到一些小的问题，虽然自己动手也能解决，但是有了一些小工具，解决这些问题就得心应手了，今天就为大家推荐一下Android 开发遇到的小工具，来让你的开发更高效。</p>
<h2 id="Vysor"><a href="https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm" target="_blank" rel="external">Vysor</a></h2><hr>
<p>Vysor 是一个可以将手机的屏幕投影到电脑上，当然也可以操作，当我们做分享或者演示的时候，这个工具起到了作用。<br><img src="http://upload-images.jianshu.io/upload_images/40592-9a704beee150c2a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Vector_Asset"><a href="">Vector Asset</a></h2><hr>
<p>Android Studio 在1.4 支持了VectorAsset，所谓VectorAsset；它可以帮助你在Android 项目中添加Material Icon 和SVG 图片来作为一个Drawable 资源来使用。不过唯一一点的缺陷就是没有搜索功能，如果你想精心挑选Material Icon ，可以打来网页版<a href="https://design.google.com/icons/" target="_blank" rel="external">https://design.google.com/icons/</a> 来选择，也可以下载SVG 和Png 格式。对于VectorAsset 的好处，它的文件更小，更容易适配不同的屏幕。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-1433b4e60b8b8e71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<h2 id="Stetho"><a href="https://github.com/facebook/stetho" target="_blank" rel="external">Stetho</a></h2><hr>
<p>Stetho 是一个Android 开发调试小工具，它可以让你使用Chrome Develop Tools 来可以来查看Sqlite 数据库和SharePreferences，而且可以查看网络连接的数据。在Chrome 输入框输入<strong>chrome://inspect</strong>，点击inspect 就可以开始了。如果使用OkHttp 需要添加拦截器StethoInterceptor。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-9714c72797a8e3b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="OctoTree"><a href="https://github.com/buunguyen/octotree" target="_blank" rel="external">OctoTree</a></h2><hr>
<p>OctoTree 是一个浏览器插件，它可以让你在Github 看代码时，左边栏会出现一个树状结构，就像我们在IDE 一样。当我们看一个项目的结构，或者想看具体的某个文件，这样就会很方便。<br><img src="http://upload-images.jianshu.io/upload_images/40592-43298a1788b6a78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Chrome_ADB"><a href="https://chrome.google.com/webstore/detail/chromeadb/fhdoijgfljahinnpbolfdimpcfoicmnm/related" target="_blank" rel="external">Chrome ADB</a></h2><hr>
<p>Chrome ADB 是一个使用Chrome 来调试Android 的小工具，它除了提供了安装，卸载，清理数据的基本功能，而且还提供了主页，返回，锁屏的虚拟键功能，也可以看各个应用占用的内存（不得不点名批评一下微信，关闭都还占用100M 内存，不知道你要干嘛）。它还有Android 的App，两者交互一定更有意思。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-034b173b38d6b356.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="TinyPng"><a href="https://tinypng.com/" target="_blank" rel="external">TinyPng</a></h2><hr>
<p>TinyPng 是一个图片压缩工具，可能有些人感觉这个工具应该给设计师使用，我觉得也是。不过有些时候，设计师给你出了个1920* 1080 的启动页，一张图片，1M 左右，我也是泪奔了，感觉设计师说话的时间，估计我们都压缩完了，自己动手，丰衣足食。而且它还提供了API，对不同语言都还有提供了插件，比如Java 就提供了Maven 的支持。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-d0aec032399a8771.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="PostMan"><a href="https://www.getpostman.com/" target="_blank" rel="external">PostMan</a></h2><hr>
<p>PostMan 是一个API 调试工具，它提供Chrome App 和Mac App，除了提供基本的API 测试功能， 它还可以添加各种的Auth 认证，响应结果可以选择不同类型，比如HTML，JSON 等，可以设置通用的Header，还可以将之前测试的添加到一个集合，而且也可以同步到服务器，而且最近还添加了团队服务，想想服务器端写完测试你就能看到结果，而不是给你API 文档（当然API 文档还是要有的），这画面太美，我不敢想象。当然它的功能也远远不止这些，它还有专业版，想尝试更多的东西可以体验一下。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-38283da81e70dd77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Genymotion_虚拟机"><a href="https://www.genymotion.com/#!/" target="_blank" rel="external">Genymotion 虚拟机</a></h2><hr>
<p>刚开始做开发的时候，每次使用官方的虚拟机，都想吐槽一下，但是发现了Genymotion 之后，这一切都变化了，它的速度几乎可以和真机媲美了，当然如果有真机，当然还是推荐使用真机测试。据说官方模拟器2.0 很快，不知道是不是又吹牛逼。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-1d7ebc1e1847ec62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Json2POJO"><a href="http://www.jsonschema2pojo.org/" target="_blank" rel="external">Json2POJO</a></h2><hr>
<p>Json2POJO 是可以将一个Json 字符串转换成Java 的POJO 类的网页工具，而且可以选择转换器，比如我们使用Retrofit 可以选择Jackson，Gson，而且可以选择重写get，set 方法，还有hashcode，equals 和toString 方法，可以省去了不少手写的时间。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-f6175994f86152fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Android_Pixel"><a href="http://androidpixels.net/" target="_blank" rel="external">Android Pixel</a></h2><hr>
<p>AndroidPixel 是一个简单的将不同的分辨率的换算工具，只要你有一个尺寸的大小，其他的尺寸大小就可以得出，当然dp 这样的单位，可以解决一部分问题，但是大多还要需要微调，这时AndroidPixel 就起到了作用。这个工具来自上一个公司同事告诉我的。</p>
<h2 id="Android_Arsenal"><a href="http://android-arsenal.com/" target="_blank" rel="external">Android Arsenal</a></h2><hr>
<p>Android Arsenal 主要是推荐Github 上一些流行的Android 开源项目，基本上最近热门的Android 开源项目都会出现在这里，它还对不同类库进行了分类。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-f6a7aded4578f6f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="Codota"><a href="https://www.codota.com/" target="_blank" rel="external">Codota</a></h2><hr>
<p>Codota 是一款Android 代码搜索工具，Codota 目前已经收录超过七百万精品代码实例；具体的详细介绍请看文章《<a href="http://www.jianshu.com/p/59b89c26f9e0" target="_blank" rel="external">Android 开发工具之Codota——搜索最好的Android 代码 - 简书</a>》，而且发现好的代码段，可以自己收藏。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-6f1e985193840cfb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="AndroidAssetStudio"><a href="http://romannurik.github.io/AndroidAssetStudio/index.html" target="_blank" rel="external">AndroidAssetStudio</a></h2><hr>
<p>Android Asset Studio 是一个在线制作工具，它可以制作Iocn，ActionBar，点9 图等等，简单的操作，大大提高了我们开发的效率。<br><img src="http://upload-images.jianshu.io/upload_images/40592-754d22d059e1c924.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="WiFi_ADB"><a href="https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&amp;hl=zh_CN" target="_blank" rel="external">WiFi ADB</a></h2><hr>
<p>WiFi ADB 是一个通过无线网络来使电脑和手机连接的手机App（可以去Google Play 搜索类似的），当我们做测试的时候，只需在手机上打开，电脑只需在命令行输入 <code>adb connect xxx.xxx.xxx.xxx:5555</code>，电脑可以连接手机，就可以通过无线网络来调试开发的应用。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-666c275c9ff35095.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="ES_Explorer"><a href="http://www.estrongs.com/" target="_blank" rel="external">ES Explorer</a></h2><hr>
<p>ES Explorer 是一款文件管理器，但实际它又不仅仅是一款文件管理器，在获得Root 之后，它的功能更强大了，它可以浏览受限制的文件目录；而且提供了一系列小工具，比如下载器；还有集成了众多云储存服务。<br><img src="http://upload-images.jianshu.io/upload_images/40592-5bcfe02e30b57743.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>是不是感觉好多都没有提到，点击下方关注我的公众号，查看下篇吧。</p>
<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-6ac98c0d478a5ae7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安卓同学(AndroidMate)的公众号，更多分享..."></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://airpair-blog.s3.amazonaws.com/wp-content/uploads/2014/09/android-tools.png" alt="Photo from [https://www.airpair.com](ht]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="Tool" scheme="http://tikitoo.github.io/tags/Tool/"/>
    
      <category term="工具" scheme="http://tikitoo.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 中 Handler，Looper，HandlerThread 的使用]]></title>
    <link href="http://tikitoo.github.io/2016/03/19/android_handler_looper/"/>
    <id>http://tikitoo.github.io/2016/03/19/android_handler_looper/</id>
    <published>2016-03-19T03:23:41.000Z</published>
    <updated>2016-04-20T12:48:36.080Z</updated>
    <content type="html"><![CDATA[<p>Android 中非UI 线程（WorkThread）不能操作UI 线程（MainThread），那线程之间通信我们该怎么办？在Java 我们可以通过多线程来处理，但是Java 的多线程晦涩难懂，所以Android 的引入了Handler，Looper 的机制来处理线程间的通信。</p>
<p>其实网上有很多人都写过Handler，Looper 的教程，但是看别人的东西就像看过猪跑，和吃过猪肉的感觉完全不一样（这个恰当可能不太恰当，各位还是不要对号入座），所以我就自己来重新梳理梳理以便于自己理解更加深刻。</p>
<p>先来看看他们的工作流程吧<br><img src="http://ww4.sinaimg.cn/large/68622377gw1f33gi2ukg1j209l069dgd.jpg" alt="图片来自http://anany.me/2015/04/12/handler/"></p>
<p>handler 发送Message 给MessageQueue，Looper 来轮询消息，如果有Message，然后再发送给Handler，Handler 拿到消息就可以所在的线程执行了。</p>
<p>一般就两种情况，MainThread 发送给WorkThread 和WorkThread 发送给MainThread，特别常用的情景就是我们在WorkThread 执行一些耗时的操作（网络请求，文件读写），返回的数据来更新MainThread，下面写个例子看一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WHAT_ONE = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Handler mMainHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">            <span class="keyword">case</span> WHAT_ONE:</span><br><span class="line">                Toast.makeText(HandlerActivity.<span class="keyword">this</span>, <span class="string">"what one"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendToMain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">        <span class="annotation">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mMainHandler.sendEmptyMessage(WHAT_ONE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在主线程创建一个Handler 重写handlerMessage(Message msg) 方法，然后使用<br>handler 发送消息给Handler，在handlerMessage() 来处理，如果发送很多消息它是怎么区别的，其实Message 对象中有个what 字段，比这这个例子sendEmptyMessage() 就是发送一个空消息，只需要传一个what 字段，以便于Handler 接收消息来区分，发送消息这一块下面会详细讲。</p>
<hr>
<p>另一种就是WorkThread 发送给MainThread<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> LooperThread looperThread;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LooperThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Handler mWorkHandler;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        Looper.prepare();</span><br><span class="line">        mWorkHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                    <span class="keyword">case</span> WHAT_ONE:</span><br><span class="line">                        mMainHandler.sendEmptyMessage(msg.what);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">super</span>.handleMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Looper.loop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendToWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    looperThread = <span class="keyword">new</span> LooperThread();</span><br><span class="line">    looperThread.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendToWork2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (looperThread.mWorkHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        looperThread.mWorkHandler.sendEmptyMessage(WHAT_ONE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这个和上面的感觉有点不同，我们会创建一个线程，在run() 中创建Handler，然而发现会多调用了两个方法Looper.prepare() 和Looper.loop() 这两个方法是干什么用的。但发现上面第一个并没有调用这两个方法，其实并不是没有调用，只是在它的父类中ActivityThread 的main() 方法已经调用了。接下来就看看这两个方法到底干了什么。</p>
<h3 id="Looper-prepare()">Looper.prepare()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    prepare(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sThreadLocal.get() will return null unless you've called prepare().</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例化Looper</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Looper</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">    mQueue = <span class="keyword">new</span> MessageQueue(quitAllowed);</span><br><span class="line">    mThread = Thread.currentThread();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>会发现将实例化一个Looper 传给给sThreadLocal，只有sThreadLocal 为空的时候，才会传一个Looper那么就说sThreadLocal 只有一个Looper，如果在WorkThread 多次调用或者不调用都会报<strong>Only one Looper may be created per thread</strong>。<br>而sThreadLocal 在全局已经初始化了，ThreadLocal 允许我们创建只能一个当前线程属于的对象当前读写的变量，就算其他线程中调用，也执行get 和set 方法，也无法获取这个的值，因此ThreadLocal 和Looper 是一一对应的。</p>
<p>Looper 实例化会创建一个MessageQueue 对象，它主要就是消息队列，来存储消息的。</p>
<h3 id="Looper-loop()">Looper.loop()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="annotation">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">    <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 最后会调用handlermMessage()</span></span><br><span class="line">        msg.target.dispatchMessage(msg);</span><br><span class="line"></span><br><span class="line">        msg.recycleUnchecked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * Handle system messages here.</span><br><span class="line"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">        handleCallback(msg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        handleMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看上面的loop() 的代码，我把一些不管紧要的代码都去掉了，核心代码基本上就这些了，首先我们会调用myLooper() 的方法，获取Looper 对象，然后再获取MessagQueue，然后就开始轮训了，获取Message，target 字段就是Handler 对象，因为每次发送消息都会讲当前的Handler 传送过去，dispatchMessage 最后调用handleMessage()。然后我们就在handleMessage() 根据what 字段来识别不同地方发送消息，然后做出相应的动作。</p>
<p>更深入的可以阅读下面的参考。</p>
<h2 id="参考">参考</h2><hr>
<p><a href="http://anany.me/2015/04/12/handler/#" target="_blank" rel="external">http://anany.me/2015/04/12/handler/#</a><br><a href="http://developer.android.com/intl/zh-cn/reference/android/os/Handler.html" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/reference/android/os/Handler.html</a><br><a href="http://blog.dreamtobe.cn/2016/03/11/android_handler_looper" target="_blank" rel="external">http://blog.dreamtobe.cn/2016/03/11/android_handler_looper</a><br><a href="https://hit-alibaba.github.io/interview/Android/basic/Android-handler-thread-looper.html" target="_blank" rel="external">https://hit-alibaba.github.io/interview/Android/basic/Android-handler-thread-looper.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Android 中非UI 线程（WorkThread）不能操作UI 线程（MainThread），那线程之间通信我们该怎么办？在Java 我们可以通过多线程来处理，但是Java 的多线程晦涩难懂，所以Android 的引入了Handler，Looper 的机制来处理线程间的]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AsyncTask 的使用和注意的问题]]></title>
    <link href="http://tikitoo.github.io/2016/03/14/android_asynctask_use_and_problem/"/>
    <id>http://tikitoo.github.io/2016/03/14/android_asynctask_use_and_problem/</id>
    <published>2016-03-14T00:05:41.000Z</published>
    <updated>2016-04-19T15:17:21.543Z</updated>
    <content type="html"><![CDATA[<p>AsyncTask 算是我们比较经常使用的一个系统类了，我们知道费UI 线程是不能更新UI 的，当我们做一些耗时的操作只能借助Handler，Looper 来实现，比如我们从网络下载东西，想要进度条来更新，自己实现会很麻烦。然而使用AsyncTask 处理起来会非常轻松。<br>它来做一些异步处理的请求，然后可以很轻松地更新UI。<br>它是一个抽象类，就说明它是不具体的，我们要使用它，肯定要实现他的抽象方法。<br>我们继承会发现AsyncTask<params, progress,="" result=""> 枚举有三个不同的变量，这个我们可以跟着他的不同的方法的参数和返回值来一块看会更加清晰。</params,></p>
<p>onPreExecute()：在执行任务之前可以做一些初始化操作。<br>Result doInBackground(Params…)：唯一的一个抽象方法，我们可以在这个方法执行耗时的操作。然后可以来更新UI。<br>onPostExecute(Result result())：doInBackground() 方法的返回值会传给方法的参数。doInBackground() 执行完执行此方法。<br>publishProgress(Progress… values)：在doInBackground() 方法中调用此方法，比如下载东西会随着下载的进度一直变化，将参数传给onProgressUpdate 方法，可以在onProgressUpdate 方法中更新的UI。<br>onProgressUpdate(Progress… values)：更新UI。<br>execute(Params…)：最后调用此方法就开始执行了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">Bitmap</span>&gt;() </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPreExecute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Bitmap <span class="title">doInBackground</span><span class="params">(String... params)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                publishProgress(i);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                Thread.interrupted();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPostExecute(bitmap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onProgressUpdate(values);</span><br><span class="line">        AsyncActivity.mProgressBar.setProgress(values[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCancelled</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCancelled(bitmap);</span><br><span class="line">        bitmap.recycle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Task().execute(str);</span><br></pre></td></tr></table></figure>
<p>cancel(boolean)：可以随时取消任务。<br>isCancelled()：判断任务是否取消<br>onCancelled(Result result)：doInBackground() 执行完成后，并且cancel() 之后执行。</p>
<p>除了doInBackground() 方法，其他都是执行在UI 线程的。而doInBackground() 执行完可以来更新UI。</p>
<p>AsyncTask 中几个重要的概念<br>AsyncTask 的原理是当多个任务，有一个默认的线程池SerialExecutor 来执行异步任务，然后在 子线程执行doInBackground 方法，<br>AsyncTaskResult 一个持有AsyncTaskResult 持有AsyncTask，Result，然后通过Handler 发送AsyncTaskResult  对象再来更新UI 线程。<br>FutureTask ：异步任务的取消和获取结果<br>ThreadPoolExecutor：默认的一个线程池，你也可以使用executeOnExecutor() 方法传入自定义的线程池。</p>
<h2 id="问题以及缺陷">问题以及缺陷</h2><p>默认线程池设定的又最大线程数，一旦超出（默认为128）再提交任务，将会抛出RejectedExecutionException。<br>内存泄露：AsyncTask 使用线程池来处，线程的声明周期是很不稳定，而且还要用来更新UI，一旦Activity 被destoy，将会造成内存泄露。所以使用时要讲持有对象使用弱引用。</p>
<h2 id="参考">参考</h2><hr>
<p><a href="http://blog.csdn.net/guolin_blog/article/details/11711405" target="_blank" rel="external">http://blog.csdn.net/guolin_blog/article/details/11711405</a><br><a href="http://www.cnblogs.com/dolphin0520/p/3949310.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3949310.html</a><br><a href="http://blog.csdn.net/amurocrash/article/details/50876229" target="_blank" rel="external">http://blog.csdn.net/amurocrash/article/details/50876229</a><br><a href="http://developer.android.com/intl/zh-cn/reference/android/os/AsyncTask.html" target="_blank" rel="external">http://developer.android.com/intl/zh-cn/reference/android/os/AsyncTask.html</a><br><a href="http://www.cnblogs.com/dolphin0520/p/3949310.html" target="_blank" rel="external">http://www.cnblogs.com/dolphin0520/p/3949310.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>AsyncTask 算是我们比较经常使用的一个系统类了，我们知道费UI 线程是不能更新UI 的，当我们做一些耗时的操作只能借助Handler，Looper 来实现，比如我们从网络下载东西，想要进度条来更新，自己实现会很麻烦。然而使用AsyncTask 处理起来会非常轻松。<]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 开发进阶指南]]></title>
    <link href="http://tikitoo.github.io/2016/03/01/android_medium_guide/"/>
    <id>http://tikitoo.github.io/2016/03/01/android_medium_guide/</id>
    <published>2016-02-29T23:22:41.000Z</published>
    <updated>2016-04-19T15:53:08.902Z</updated>
    <content type="html"><![CDATA[<p>之前有人在朋友圈评论我说，现在学习Android 遇到了瓶颈，基本上一般的API，市面上大部分App UI 都能做出来，该怎么提高？然后我回复他了，我学习Android 也有一年左右，也是个菜鸟，也遇到这样的问题，所以就各种查资料，看看大神们都在研究什么技术，也跟着学习学习。当初在逛知乎看到了一些问题（PS：逛知乎还是很有好处的嘛！！！），看到很多回答就觉得很受启发，还有看别人的博客，也很受用，想要写一篇文章的想法，等了一两周才开始动手。</p>
<h2 id="新手学习遇到瓶颈">新手学习遇到瓶颈</h2><hr>
<p>我觉得新手做的更多是重复的工作，可能接触好的项目，前一两个月会觉得学到好的东西，但是随着公司的东西慢慢熟悉，也就变成日复一日的重复劳动，然后慢慢感觉也就学习遇到了瓶颈，而一些太难的东西又不太情愿去琢磨，比如读Android 源码，你使用Handler Loopeer 感觉很巧妙，可以仔细研究一下；还有就是很多第三方开源库你使用起来很方便，如果这个时候你仔细阅读源码，也一定能感受它的设计的巧妙。因此，我多方搜集，整理出来了以下几条，有一定经验接下来要做的事。</p>
<ul>
<li>解决问题的能力。可能老手的遇到的Bug 可能比你写的代码都多。</li>
<li>阅读和理解源码。新手可能就是使用API，而老手会去阅读源码，理解开源项目或者Android 系统的源码，理解他们的架构。</li>
<li>深入理解Java 和Android 。Android 应用层的东西基本上基于Java，想要写好Android，Java 已经要过关。</li>
<li>了解编译原理等CS基本知识。我觉得这一条是每个程序员应该必备的。比如像计算机网络（HTTP，TCP/IP），算法与数据结构。<br>下面我会分别按照这几点给大家详细讲解（其实是来看看大牛们的演讲）。</li>
</ul>
<h2 id="解决问题的能力">解决问题的能力</h2><hr>
<p>我觉得这个我没有能力回答，不过之前有幸听过一个演讲，@阿拉神农 邓凡平老师在北京GDG DevFest 的一个演讲，说过你进入一个项目组，不要惧怕问题和Bug，你把很多问题解决了，你的技术也会上升到一个层次。邓老师在文中也提到了怎么学，学到什么程度，以及学什么，还专门提到多线程，网络（HTTP，TCP/IP）编程，设计模式这些基础东西，就算Android 有一天不行了，这些东西也一样会被吸收借鉴的。<br>关于演讲的内容：《Android开发进阶之旅》<br><a href="http://weibo.com/1826440077/D36AAiF2G。" target="_blank" rel="external">http://weibo.com/1826440077/D36AAiF2G。</a></p>
<blockquote>
<p>注：邓老师从事软件开发有十余年，之前是做底层开发，现在在做应用层的开发，他也是《深入理解Android》系列书籍的主要作者之一。</p>
</blockquote>
<h2 id="阅读和理解源码">阅读和理解源码</h2><hr>
<p>这个问题我也没有多大能力去回答，也读过一些开源库的源码，像Retrofit，Volley，还有像Handler Loopeer 的机制，其他的虽然阅读过，但是没有理解太深，这也是我以后努力的方向。还有人问问什么要读源码，我想说，如果你写写XML 布局文件，会用用API，一个实习生两三个月就和你差不多了，你还有什么资历说你很有经验，知其然知其所以然说的就是这样的意思，阅读和理解源码让你更好使用API，解决问题的能力也大有提高，也有了造轮子的能力。当然了跳槽面试的时候也可以吹牛逼了。</p>
<p>下面的两篇文章是Kaede 的博客上两篇文章，他也有自己的知乎专栏——《中二病也要开发Android》。Kaede 在文中阐述了，为什么要阅读Android 源码，以及该怎么读，还有要读哪些，对于源码接触不太多的同学有个参考，也推荐一些大牛的博客，站在巨人的肩上，有了前人的参考，也会事倍功半的。</p>
<ul>
<li><a href="http://kaedea.com/2016/02/08/android-about-source-code/" target="_blank" rel="external">有没有必要阅读Android源码</a><br><a href="http://kaedea.com/2016/02/08/android-about-source-code/" target="_blank" rel="external">http://kaedea.com/2016/02/08/android-about-source-code/</a></li>
<li><a href="http://kaedea.com/2016/02/09/android-about-source-code-how-to-read/" target="_blank" rel="external">阅读Android源码的一些姿势</a><br><a href="http://kaedea.com/2016/02/09/android-about-source-code-how-to-read/" target="_blank" rel="external">http://kaedea.com/2016/02/09/android-about-source-code-how-to-read/</a></li>
</ul>
<h2 id="深入理解Java">深入理解Java</h2><hr>
<p>Java语言相对来说比C++ 简单很多，但是对于经常写业务代码的人，对于如何写出优雅的java代码以及如何辨别垃圾代码，还有Java的内存模型/GC，并发机制，虚拟机执行流程肯定不甚了解，因此，这个阶段，我打算大致搞清楚Java语言本身，顺便从这个角度切入编程语言本身；主要如下：</p>
<ol>
<li>学习如何写更好的Java 代码，《Effective Java》值得一读。</li>
<li>什么样的Java 代码是有问题的？《Java解惑》；怎么改写代码？《重构》</li>
<li>学习一些没有接触过的Java 高级库，NIO/AIO, concurrent/forkjoin等，有机会使用到工作过程中。  </li>
<li>了解Java 虚拟机 《深入理解Java 虚拟机》《实战Java 虚拟机》；从这里，可以知道很多JVM 的运行原理，内存模型，class 文件格式，Java 并发原理，虚拟机执行引擎等相当多的东西；虽然说Android 的虚拟机Dalvik 和ART（ART 也许称不上虚拟机）使用的不是标准的HotSpot 但是，我相信原理都差不多。</li>
</ol>
<p>但是，Java平台的技术栈远非这么一点，学无止境；走到这一步，我觉得对于Java语言已经算得上掌握了，于是主要目标转向编程语言本身。</p>
<h2 id="深入Android">深入Android</h2><hr>
<p>这一块有很多人分享过经验，其实无非那么几点，我就简单重申一下吧。</p>
<ol>
<li>IPC机制，Binder和匿名共享内存等</li>
<li>四大组件启动，工作原理</li>
<li>View系统，绘制原理，事件分发</li>
<li>动画框架，原理</li>
<li>多线程机制，消息机制 AsyncTask，Thread/Handler</li>
<li>系统启动过程，system_server启动过程</li>
<li>Window系统，Window创建过程</li>
<li>资源管理系统，资源加载机制等  </li>
</ol>
<p>《Android 开发艺术探索》这本书确实不错，适合中级程序员。个人感觉《Android 内核剖析》挺不错的，虽然有点过时了也买不到书了。  《Android 源码设计模式》，在Android 的源码中都有什么使用哪些设计模式，也让你更深入去理解源码。<br>当你搞清楚了这些，基本上你写的什么代码在Android 上层是怎么运作的都了然于胸；FrameWork 层的任何问题也拦不住你的脚步了；不过这个阶段，仅仅是了解了Android 系统Framework 层的原理，对于怎么写代码，对于语言本身，对于Android 系统底层的原理依然很迷惑，没事，已经看到了光了，一步一步来。</p>
<p>除了Android 源码值得读的，还有第三方的开源库也是值得一读的，有的开源库甚至比官方的更加好用，比如像我们常用的Retrofit，OkHttp，Picasso，Volley，EventBus，Dagger，我们基本上都能熟悉使用，<a href="https://github.com/Trinea" target="_blank" rel="external">Trinea</a> 和一些大牛在Github 做的一个项目，专门分析了开源项目，我们可以参考着来看。</p>
<ul>
<li><a href="https://github.com/android-cn" target="_blank" rel="external">android-cn</a>/<a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="external">android-open-project-analysis</a><br><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="external">https://github.com/android-cn/android-open-project-analysis</a></li>
</ul>
<p>我觉得新手阅读源码的姿势还是有点弱，当然站在巨人的肩膀就会事半功倍，所以看看大牛写的文章还是很~(≧▽≦)/~涨姿势的。</p>
<h2 id="了解编译原理等CS基本知识">了解编译原理等CS基本知识</h2><hr>
<p>推荐一下R 大的书单吧：<a href="http://zhuanlan.zhihu.com/hllvm/20130808。" target="_blank" rel="external">http://zhuanlan.zhihu.com/hllvm/20130808。</a><br>当然由于定位不一样，我肯定不会像他一样专门搞搞基语言虚拟机（主要是我没那个水平！），仅供参考；我自己目前看的几本书如下：《编程语言实现模式》《深入理解计算机系统》《SICP》《编译器设计》；然后由于在学Haskell，所以在追github上一个项目，sdiehl/write-you-a-haskell ；具体怎么做还是边走边瞧。<br>后面的我也不敢说太多，目前打算是希望深入了解Linux内核，以前看过《深度探索Linux 操作系统:系统构建和原理解析》；打算看《深入Linux内核》《Unix环境高级编程》；只要越过了浮躁期，其实目标还是很明确的；知道自己该学习什么，也知道大致该怎么做；感觉自己走在正确的路上，越来越接近那个目标，每天都充满希望。</p>
<h2 id="参考">参考</h2><hr>
<ul>
<li><a href="http://blog.csdn.net/column/details/androiddept.html" target="_blank" rel="external">Android开发高手进阶教程</a><br><a href="http://blog.csdn.net/column/details/androiddept.html" target="_blank" rel="external">http://blog.csdn.net/column/details/androiddept.html</a></li>
<li><a href="https://www.zhihu.com/question/39009692" target="_blank" rel="external">怎样的Android开发毕业生可以算达到优秀的水平？</a><br><a href="https://www.zhihu.com/question/39009692" target="_blank" rel="external">https://www.zhihu.com/question/39009692</a></li>
<li><a href="http://blog.csdn.net/singwhatiwanna/article/details/42343847" target="_blank" rel="external">android学习路线：如何成长为高级工程师</a><br><a href="http://blog.csdn.net/singwhatiwanna/article/details/42343847" target="_blank" rel="external">http://blog.csdn.net/singwhatiwanna/article/details/42343847</a></li>
<li><a href="https://github.com/android-cn/android-open-project-analysis/" target="_blank" rel="external">android-cn/android-open-project-analysis</a><br><a href="https://github.com/android-cn/android-open-project-analysis/" target="_blank" rel="external">https://github.com/android-cn/android-open-project-analysis/</a></li>
</ul>
<p>本文部分章节参考来自<a href="https://www.zhihu.com/people/tian-weishu" target="_blank" rel="external">weishu</a> 在知乎上面的回答，如果你觉得本文不错，也可以点击链接可以给打点个赞，在这里多谢了。</p>
<ul>
<li><a href="https://www.zhihu.com/question/37549641/answer/83217748" target="_blank" rel="external">Android 程序猿如何继续深入的研究技术层的知识？ - weishu 的回答 - 知乎</a><br><a href="https://www.zhihu.com/question/37549641/answer/83217748" target="_blank" rel="external">https://www.zhihu.com/question/37549641/answer/83217748</a></li>
</ul>
<p>本篇文章能够完成，参考了weishu，邓凡平老师，kaedea，Trinea，当然也看了很多博客，在这里特别感谢他们，本人资历尚且有限，写过过程中难免会有疏漏，还请见谅。</p>
<hr>
<p><img src="http://upload-images.jianshu.io/upload_images/40592-6ac98c0d478a5ae7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安卓同学(AndroidMate)的公众号，更多分享..."></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前有人在朋友圈评论我说，现在学习Android 遇到了瓶颈，基本上一般的API，市面上大部分App UI 都能做出来，该怎么提高？然后我回复他了，我学习Android 也有一年左右，也是个菜鸟，也遇到这样的问题，所以就各种查资料，看看大神们都在研究什么技术，也跟着学习学习]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="Guide" scheme="http://tikitoo.github.io/tags/Guide/"/>
    
      <category term="指南" scheme="http://tikitoo.github.io/tags/%E6%8C%87%E5%8D%97/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 开发有哪些新技术出现？]]></title>
    <link href="http://tikitoo.github.io/2016/01/29/What-new-technologies-have-android/"/>
    <id>http://tikitoo.github.io/2016/01/29/What-new-technologies-have-android/</id>
    <published>2016-01-29T14:45:25.000Z</published>
    <updated>2016-01-30T04:25:47.213Z</updated>
    <content type="html"><![CDATA[<p>作为一个程序员，应该养成持续学习的能力，随时关注新技术，有时候做起事来会让你事半功倍的效果。之前在知乎上看到下面这个问题，觉得很受用，所有就总结了大牛们的回答，也跟着大牛们的脚步，看看有哪些新技术，也跟着学习学习，涨涨见识。</p>
<blockquote>
<p>本文参考<a href="weibo.com/devandroid">@Android 笔记</a> 在知乎的回答：<br>Android 开发有哪些新技术出现？<br><a href="https://www.zhihu.com/question/32037895" target="_blank" rel="external">https://www.zhihu.com/question/32037895</a></p>
</blockquote>
<h2 id="Android_Studio">Android Studio</h2><p>Android Studio 是Google 官方推出的全新的Android 开发的IDE，自2013 年发布，目前最新稳定版是1.5。<br>目前Google 官方放弃 Eclipse 的支持，加上Android Studio 普及。AS 虽然不算新，但是对 Android Studio 这个软件的更新速度快的惊人，有大量的新功能发布。<br>例如支持很多注解代码提示注解、Live Code Template、支持自动生成 Parcelable 实现等等，作为开发者，持续关注这个更新列表：<a href="tools.android.com/recent">tools.android.com/recent</a>，一定会让你的写代码的生活更加美好。<br>而且Android 1.0 之后大量的新特性，让我们的开发更便捷，比如Vector Asset，Theme Editor，Gradle 编译速度大幅提升，Android Studio 2.0 的Install Run 实现的实时运行功能。</p>
<h2 id="Material_Design_设计">Material Design 设计</h2><p>Android 4.0 的Android Design 留下了诟病，也让Google 下定了决心，在5.0 推出了Material Design 全平台设计语言。它对于每一个点击，每一次滑动都有设计规范。对于设计师和程序员都是值得一看的。</p>
<blockquote>
<p>Material Design 设计规范：<a href="https://design.google.com/" target="_blank" rel="external">https://design.google.com/</a></p>
</blockquote>
<h2 id="Design_设计支持库">Design 设计支持库</h2><p>如果说Material Design 是设计师看的（其实程序员也应该看）。那么的Design 设计支持库，也使得Material Design 设计在Android 中也慢慢实现了。也让没有设计感的程序员也可以制作出惊艳的App。比如Navigation View（侧滑栏），Floating Action Button（悬浮按钮），Snackbar，TabLayout，CoordinatorLayout，App Bar，nestedscrollview。</p>
<blockquote>
<p><a href="http://android-developers.blogspot.com/2015/05/android-design-support-library.html" target="_blank" rel="external">http://android-developers.blogspot.com/2015/05/android-design-support-library.html</a></p>
</blockquote>
<h2 id="Sketch_3"><strong>Sketch 3</strong></h2><p>这是一个专为设计移动端 UI 的设计工具，作为开发者，不用懂那么复杂的 PS 使用，也可以做非常专业设计：<a href="https://designcode.io/sketch" target="_blank" rel="external">https://designcode.io/sketch</a></p>
<h2 id="RecyclerView">RecyclerView</h2><p>RecyclerView的几大特性：</p>
<p><strong>ViewHolder 模式</strong>：在ListView 中需要手动添加ViewHolder 模式，而且不会重用之前的View，RecyclerView默认实现了重用，让绘制View 更加高效。</p>
<p><strong>LayoutManager </strong>：设置布局，就可以实现单列表，GridView，瀑布流的效果。</p>
<p><strong>Item Decoration</strong>：自定义各种分割线</p>
<p><strong>Item Animator</strong>：设置各种炫酷增删动画</p>
<p> RecyclerView 对于不同类型可以很容易添加。现在很多App 的首页很复杂的内容，样式不一样，使用RecyclerView 很容易解决，还有底部加载更多也很容易实现。</p>
<h2 id="Kotlin">Kotlin</h2><p>作为 Android 领域的 Swift，绝对让你如沐新风。抛弃沉重的 Java 语法，Kotlin 融入了很多现代编程语言的思想，作为开发者，接受新的语言，了解新语言的发展趋势，更有利于开阔你的思路和加深对语言的理解。在 Android 开发上，使用 Kotlin 并不会让你付出什么代价，为什么不来试试？</p>
<h2 id="Fresco"><strong><a href="https://github.com/facebook/fresco" target="_blank" rel="external">Fresco</a></strong></h2><p>Fresco是Facebook最新推出的一款用于Android应用中展示图片的强大图片库，可以从网络、本地存储和本地资源中加载图片。其中的Drawees可以显示占位符，直到图片加载完成。而当图片从屏幕上消失时，会自动释放内存。</p>
<h2 id="React_Native">React Native</h2><p>React Native 结合了 Web 应用和 Native 应用的优势，可以使用 JavaScript 来开发 iOS 和 Android 原生应用。在 JavaScript 中用 React 抽象操作系统原生的 UI 组件，代替 DOM 元素来渲染等。</p>
<p>跨平台一直是程序员的梦想，而且移动应用的跨平台解决方案也很多，因为 Facebook 的参与和力推，让这个解决方案带上了光环。第一个用 React Native 开发的 App 已经在 Google Play 上架 <a href="//link.zhihu.com/?target=https%3A//play.google.com/store/apps/details%3Fid%3Dcom.facebook.adsmanager">Facebook 广告管理工具</a>，目前iOS 和Android 版本都已发布，最新版为0.5。</p>
<h2 id="Dagger_2">Dagger 2</h2><p>Dagger 2 是Google 主导开发的依赖注入框架，它是基于Dagger 1（由Square 主导开发），利用生成和写的代码混合达到看似所有的产生和提供依赖的代码都是手写的样子，极大减少了使用者的编码负担，也更便于调试，Google 声称提高了13 % 的性能，。</p>
<h2 id="MVP">MVP</h2><p>我们都知道MVC 模式，MVP 就是基于MVC 的模式上的一个演化版本。在MVC模式中，Activity应该是属于View这一层。而实质上，它既承担了View，同时也包含一些Controller的东西在里面。随着项目的迭代更新，这对开发很不友好，耦合度也原来越高，项目越来越难维护，而MVP 就是解决这样的痛点。把Activity的View和Controller抽离出来就变成了View和Presenter。</p>
<h2 id="DataBinding_MVVM">DataBinding <strong>MVVM</strong></h2><p>DataBinding 即数据绑定，在前端的框架有很广泛的使用，比如像AngularJS，就支持双向绑定。<br>所谓MVVM，像Activity，Fragment，View 都属于View 这一层；Model层主要负责数据相关部分，可以从数据库或者网络获取；ViewModel主要是把Model转换为View 可以呈现的东西，例如把一个Date 类型转化为格式化后的String，也就是将前面两者联系在一起的对象，<br>在Data Binding 支持下，会根据layout 文件名自动生成一个相对应的Binding（比如activity_main，对应生成MainActivityDataBinding 对象），数据绑定在Layout文件中XML标注。<br>在Google I/O 2015上，伴随着Android M预览版发布的Data Binding 兼容函数库改变了这一切。而在Android Studio 2.5 的预览版，Data Binding 在XML 中也终于有了代码提示功能。</p>
<h2 id="RxJava/RxAndroid">RxJava/RxAndroid</h2><p>RxJava一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库。用简单的一个词来介绍就是“异步”。<br>它提供了基于Observable（观察者） 序列实现的异步调用及基于事件编程。<br>它扩展了观察者模式，支持数据、事件序列并允许你合并序列，无需关心底层的线程处理、同步、线程安全、并发数据结构和非阻塞I/O处理。<br>它支持Java5 及更高版本，并支持其他一些基于JVM的语言，如Groovy、Clojure和Scala。而且他能和Retrofit 更好的结合使用，也有相对应的RxBus 等框架结合。</p>
<h2 id="Espresso_2-0">Espresso 2.0</h2><p>近些年，随着Android社区的成熟，出现了诸如Robotium，Robolectric等的优秀测试框架。而Google也在近期推出了自己的UI测试框架Espresso。<br>Espresso 是一个提供了简单 API 的用于 Android App UI 测试的测试框架。最新的 2.0 版本发布后已经可以在 Android Support Repository 中下载了，那么在项目中集成它就方便多了。它的API 很小，对外扩张开放，测试跑起来那是相当的快，对Gradle 和Android Studio 支持。</p>
<h2 id="Baas">Baas</h2><p>Baas 又称mBaas，全称叫Backend as a Service（后端作为一种服务）， 怎么说呢，为移动应用开发者提供后端服务；作为一个移动应用开发者（Android &amp; iPhone），除了开发应用程序，还要做后台的服务器端，当然，大多移动应用开发者并非都懂后端开发， 这让一个应用应用开发者开发一款应用不容易，然而有了Baas，开发者就可以不用管后端开发了，Baas 提供商，提供了我们最常用的功能，比如数据存储，应用分析，IM 等功能，让开发者把主要精力放在应用本身，大大提高了效率。<br>当然也不一定是移动应用开发者，当然也可以Web 开发，当初Baas 主要是为了解决移动应用开发者的后端服务问题，Baas 也提供其他的服务；国外类似Parse，Firebase，国内像LeanCloud 都是提供这样的服务。</p>
<h2 id="App_Indexing">App Indexing</h2><p>我们都知道网页是一个一个超链接相连的，然而在移动互联网时代，每个App 里的数据就想信息孤岛，App Indexing 就是要打破这样的尴尬，只要你在App 实现App Indexing 功能，你的App 里的数据，就会出现在Google 的搜索结果中，尤其是出海的App，这个功能尤其重要，据说Google 打算实现在网页中直接安装App。</p>
<hr>
<h2 id="参考">参考</h2><ul>
<li><a href="https://www.zhihu.com/question/32037895" target="_blank" rel="external">Android 开发有哪些新技术出现？</a></li>
<li><a href="http://stackoverflow.com/questions/26570325/what-are-recycler-view-advantages-compared-to-listview" target="_blank" rel="external">android - what are recycler view advantages compared to listview - Stack Overflow</a></li>
<li><a href="http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0601/2962.html" target="_blank" rel="external">关于Android的Data Binding技术 - 泡在网上的日子</a></li>
<li><a href="http://www.importnew.com/8321.html" target="_blank" rel="external">在安卓上使用RxJava - ImportNew</a></li>
<li><a href="https://github.com/bboyfeiyu/android-tech-frontier/blob/master/issue-11/Android-Espresso%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D.md" target="_blank" rel="external">Android-Espresso测试框架介绍 - bboyfeiyu/android-tech-frontier</a></li>
</ul>
<h2 id=""><br></h2><p><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学的公众号，更多分享..."></p>
<center>Tikitoo 的公众号，更多分享…</center>
]]></content>
    <summary type="html">
    <![CDATA[<p>作为一个程序员，应该养成持续学习的能力，随时关注新技术，有时候做起事来会让你事半功倍的效果。之前在知乎上看到下面这个问题，觉得很受用，所有就总结了大牛们的回答，也跟着大牛们的脚步，看看有哪些新技术，也跟着学习学习，涨涨见识。</p>
<blockquote>
<p>本文参考]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[每周阅读清单：程序员修炼，兴趣，TED]]></title>
    <link href="http://tikitoo.github.io/2016/01/23/reading-list_programmer_interest_ted/"/>
    <id>http://tikitoo.github.io/2016/01/23/reading-list_programmer_interest_ted/</id>
    <published>2016-01-23T13:43:30.000Z</published>
    <updated>2016-01-26T14:56:35.501Z</updated>
    <content type="html"><![CDATA[<p>不知不觉快要过年了，估计大家也都比较忙吧。这一周也上了六天，刚好今天你晚上有点空闲时间，就来总结这周工作和学习发现的好东西和好文章，来分享给大家。<br>我平常获取技术和文章大都在微博，微信，遇到好的博客都会使用Feedly 来订阅，遇到好的文章来不及看都会放在Pocket 来看。今天阅读清单也到了第二期了，也希望能给大家一些帮助。</p>
<h2 id="技术文章">技术文章</h2><hr>
<ul>
<li><p><a href="http://www.race604.com/android-weekly-30/" target="_blank" rel="external">Android 周报（第 30 期）</a><br>这个是<a href="http://weibo.com/devandroid" target="_blank" rel="external">@Android 笔记</a> 维护的，推荐了性能优化，APK 瘦身等其他方面的文章。有空大家可以去看看，跟着大牛们涨涨经验。</p>
</li>
<li><p><a href="https://imququ.com/post/four-ways-to-post-data-in-http.html" target="_blank" rel="external">四种常见的 POST 提交数据方式</a><br>可能服务端和前端对这些特别熟悉，做客户端也应该去了解 Post 的提交方式，application/x-www-form-urlencoded，multipart/form-data，application/json，text/xml。</p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="external">Git 工作流程</a><br><a href="http://www.ruanyifeng.com/" target="_blank" rel="external">阮一峰</a>老师写的Git 工作流程，讲了Git flow，Github flow，Gitlab flow 三种工作流程，Git flow 实用与我们工作中，Github flow 适用于我们开源项目中，Gitlab flow 将两者综合起来。</p>
</li>
<li><p><a href="http://tech.glowing.com/cn/advices-to-junior-developers/" target="_blank" rel="external">如何提升你的能力？给年轻程序员的几条建议</a><br>一个八年工作经验给年轻程序员的建议与经验。打造你的工具箱，高效的开发环境。开阔你的视野，构建你的技术体系。重视沟通能力的培养。累积你的人脉。寻找发挥你才华的平台。</p>
</li>
</ul>
<h2 id="互联网">互联网</h2><hr>
<ul>
<li><a href="https://www.zhihu.com/question/39377598" target="_blank" rel="external">微信应用号将会对开发者有哪些影响？</a><br>微信应用号，什么鬼？难道又是一个Hybrid App？让我们期待吧。网上也有很多讨论的文章，在这里就不多说了。</li>
</ul>
<h2 id="人文">人文</h2><hr>
<ul>
<li><p><a href="">什么是【真正的】兴趣爱好？以及它有啥好处？</a><br>其实我们所谓自己感兴趣的东西，其实不过是随便说说，也可能是说给人听的。看了这篇文章，你会很受启发。有条件科学上网的可以自己使用Google 搜一下吧。</p>
</li>
<li><p><a href="http://www.huxiu.com/article/31102/1.html" target="_blank" rel="external">人类创造未来的思想先锋：这些 TED 演示深深震撼着我们</a><br>作者作为一个中国的在美国的留学生，自己也见证了TED 的舞台上这么多年让人惊叹的科技和事情。利用仿生学让下肢残废的人重新站立起来，甚至让舞者重新站在舞台上。乔布斯在TED第一次展示他的Macintosh 电脑。 Sun 公司最先介绍了Java 语言，现在已经是编程语言的中流砥柱。</p>
</li>
</ul>
<hr>
<p><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学的公众号，更多分享..."></p>
<center>Tikitoo 的公众号，更多分享…</center>
]]></content>
    <summary type="html">
    <![CDATA[<p>不知不觉快要过年了，估计大家也都比较忙吧。这一周也上了六天，刚好今天你晚上有点空闲时间，就来总结这周工作和学习发现的好东西和好文章，来分享给大家。<br>我平常获取技术和文章大都在微博，微信，遇到好的博客都会使用Feedly 来订阅，遇到好的文章来不及看都会放在Pocket]]>
    </summary>
    
      <category term="阅读清单" scheme="http://tikitoo.github.io/tags/%E9%98%85%E8%AF%BB%E6%B8%85%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 中WebView 的使用]]></title>
    <link href="http://tikitoo.github.io/2016/01/05/android-webview-note/"/>
    <id>http://tikitoo.github.io/2016/01/05/android-webview-note/</id>
    <published>2016-01-05T15:39:41.000Z</published>
    <updated>2016-01-20T13:17:32.686Z</updated>
    <content type="html"><![CDATA[<p>我们都知道Webview 是用来加载网页的，底层使用Webkit 来实现的。首先要在清单文件里注册网络请求权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span> /&gt;</span><br></pre></td></tr></table></figure>
<p>如果使用外部程序（浏览器）打开</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Uri uri = Uri.parse(<span class="string">"http://www.example.com"</span>);</span><br><span class="line"> Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, uri);</span><br><span class="line"> startActivity(intent);</span><br></pre></td></tr></table></figure>
<h2 id="如果使用WebView_来打开">如果使用WebView 来打开</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WebView webview = <span class="keyword">new</span> WebView(<span class="keyword">this</span>);</span><br><span class="line">setContentView(webview);</span><br><span class="line">webview.loadUrl(<span class="string">"http://www.zhihu.com"</span>); <span class="comment">// notice http://</span></span><br></pre></td></tr></table></figure>
<h2 id="加载网页">加载网页</h2><p>一共有四种不同的方法，基本上一看就一目了然。可以使用字符串或者网页，设置MimeType 和编码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>	<span class="title">loadData</span><span class="params">(String data, String mimeType, String encoding)</span></span><br><span class="line"><span class="keyword">void</span>	<span class="title">loadDataWithBaseURL</span><span class="params">(String baseUrl, String data, String mimeType, String encoding, String historyUrl)</span></span><br><span class="line"><span class="keyword">void</span>	<span class="title">loadUrl</span><span class="params">(String url)</span></span><br><span class="line"><span class="keyword">void</span>	<span class="title">loadUrl</span><span class="params">(String url, Map&lt;String, String&gt; additionalHttpHeaders)</span></span></span><br></pre></td></tr></table></figure>
<p>之前遇到过一个问题，比如我们有个Base Url 后面的参数需要动态来传，我们可以使用Uri 的构造器来拼凑（当然你也可以手拼字符串）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mUrl = <span class="keyword">new</span> Uri.Builder()</span><br><span class="line">      .encodedPath(BASE_URL + <span class="string">"/user"</span>)</span><br><span class="line">      .appendQueryParameter(<span class="string">"age"</span>, age)</span><br><span class="line">      .appendQueryParameter(<span class="string">"sex"</span>, sex)</span><br><span class="line">      .appendQueryParameter(<span class="string">"token"</span>, token)</span><br><span class="line">      .build().toString();</span><br></pre></td></tr></table></figure>
<h2 id="设置一些高级的属性（比如：JS）">设置一些高级的属性（比如：JS）</h2><p>当WebView 第一次初始化，会获得一组默认值。<br> 我们可以使用WebView.getSettings() 方法来获取Settings 对象，来自定义设置一些属性。<br>当WebView 被摧毁，调用WebView.getSettings()，将会抛出IllegalStateException。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WebSettings webSettings = myWebView.getSettings();</span><br><span class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<p>一般会有set 和get 两组方法，有设置JS，缩放，字体大小，use-agent，保存表单数据等等其他属性。</p>
<h2 id="监听状态">监听状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</span><br></pre></td></tr></table></figure>
<p>我们可以继承WebViewClient，重写下面的一些方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span> <span class="comment">// 可以重写</span></span><br><span class="line"><span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> <span class="comment">// 初始化一些数据</span></span><br><span class="line"><span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> <span class="comment">// 网页加载完成</span></span></span><br></pre></td></tr></table></figure>
<p>shouldOverrideUrlLoading() 方法，我们可以设置404 页面，在js 中传输数据，在这里捕获，特殊处理。例如：在网页中打开App，就可以处理。</p>
<p>除了上面常用的，还有拦截请求，获取的错误，重写键盘事件，认证等等。</p>
<p>我们 也可以使用WebChromeClient，加载WebView 的一些属性，比如alert，prompt，进度条，可以让WebView 更加丰富。</p>
<h2 id="和JS_交流">和JS 交流</h2><p><strong>在Java 代码中调用JS</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String value = <span class="string">"javascript:call()"</span>;</span><br><span class="line">mWebView.loadUrl(value);</span><br></pre></td></tr></table></figure>
<p>除了上面这样，我们也可以给方法传出参数，进行计算。<br><strong>在JS 代码中调用Java</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function sumToJava(num1, num2) &#123;</span><br><span class="line">        window.android.onSumResult(num1 + num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@JavascriptInterface</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSumResult</span><span class="params">(<span class="keyword">int</span> result)</span> </span>&#123;</span><br><span class="line">    WebViewActivity.<span class="keyword">this</span>.showToast(<span class="string">"result: "</span> + result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是@JavascriptInterface 需要将TargetSDK 设置为17 或者更高，而且也有安全问题。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="openscad"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">showAndroidToast</span><span class="params">()</span> &#123;</span></span><br><span class="line">        window.android.showToast<span class="params">(<span class="string">"Hello Android!"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">save</span><span class="params">()</span> &#123;</span></span><br><span class="line">        alert<span class="params">(<span class="string">"3242"</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">call</span><span class="params">(num)</span> &#123;</span></span><br><span class="line">        alert<span class="params">(num)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sumToJava</span><span class="params">(num1, num2)</span> &#123;</span></span><br><span class="line">        window.android.onSumResult<span class="params">(num1 + num2)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</span><br><span class="line">mWebView.addJavascriptInterface(<span class="keyword">new</span> WebAppInterface(<span class="keyword">this</span>), <span class="string">"android"</span>); <span class="comment">// js 中的名字</span></span><br><span class="line">mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient() &#123;&#125;);</span><br><span class="line"></span><br><span class="line">String save = <span class="string">"javascript:save()"</span>;</span><br><span class="line">String call = <span class="string">"javascript:call(\""</span> + <span class="string">"content"</span> + <span class="string">"\")"</span>;</span><br><span class="line">call = <span class="string">"javascript:sumToJava(1, 2)"</span>;</span><br><span class="line">mWebView.loadUrl(call);</span><br></pre></td></tr></table></figure>
<p>如果我们不适用@JavascriptInterface，可以使用WebView 重写shouldOverrideUrlLoading(WebView view, String url)，将发送的链接捕获处理。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">openApp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.location = open_app:<span class="comment">//com.android.camera;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="参考">参考</h2><ul>
<li><a href="http://constgu.iteye.com/blog/1744106" target="_blank" rel="external">【原创】【源码分析】Android平台webkit组件java层代码分析 - - ITeye技术网站</a></li>
<li><a href="http://developer.android.com/intl/zh-cn/guide/webapps/webview.html" target="_blank" rel="external">Building Web Apps in WebView - Android Developers</a></li>
</ul>
<ul>
<li><a href="http://developer.android.com/intl/zh-cn/reference/android/webkit/WebSettings.html" target="_blank" rel="external">WebSettings - Android Developers</a></li>
<li><a href="http://droidyue.com/blog/2014/09/20/interaction-between-java-and-javascript-in-android/" target="_blank" rel="external">Android中Java和JavaScript交互 - 技术小黑屋</a></li>
<li><a href="http://kymjs.com/code/2015/05/03/01/" target="_blank" rel="external">深入讲解WebView——上 - 开源实验室-张涛</a></li>
<li><a href="http://kymjs.com/code/2015/05/04/01/" target="_blank" rel="external">深入讲解WebView——下 - 开源实验室-张涛</a></li>
<li><a href="http://www.pedant.cn/2014/09/10/webview-optimize-points/" target="_blank" rel="external">Android WebView开发问题及优化汇总 - 书呆子精神院</a></li>
<li><a href="http://rensanning.iteye.com/blog/2043049" target="_blank" rel="external">Android中JavaScript和Native之间的Bridge</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们都知道Webview 是用来加载网页的，底层使用Webkit 来实现的。首先要在清单文件里注册网络请求权限</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="WebView" scheme="http://tikitoo.github.io/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android 开发者必备的书单]]></title>
    <link href="http://tikitoo.github.io/2016/01/02/android-book/"/>
    <id>http://tikitoo.github.io/2016/01/02/android-book/</id>
    <published>2016-01-02T13:39:41.000Z</published>
    <updated>2016-01-26T14:56:28.494Z</updated>
    <content type="html"><![CDATA[<p>大家好，最近一段时间，Android 方面的书籍可谓是百花齐放，这几本书的作者都是在一线互联网公司奋斗的工程师，他们把多年的工作经验，身心耕植，汇聚成一本书。作为菜鸟的我们，只有一睹大神的风采了。所以借这个周末，我也列举了一些书，作为一个Android 开发工程师，这些书都是不可多得的好书，书中知识迟早是要掌握的。</p>
<p>我们都知道开发Android App 是用Java 语言的，当然你也可以使用其他语言来开发Android，当然主流还基本上都是用Java，所以先来给大家推荐几本Java 书籍，这几本书籍不必都看完采取学习Android，但随着学习的深入，就有点捉襟见肘了，所以要提升Java 的技能的。</p>
<h2 id="《深入浅出Java》"><a href="">《深入浅出Java》</a></h2><p>作为入门书籍，深入浅出系列，一直是浅显易懂，所以作为入门太合适不过了。<br><img src="http://upload-images.jianshu.io/upload_images/40592-d09723fefd39c7ea.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《Think_in_Java_（Java_编程思想）》"><a href="">《Think in Java （Java 编程思想）》</a></h2><p>如果你是初学者，可以跳过这本书，但你稍微有点经验，这本书就逃脱不过了，当你觉得Java 水品想要从菜鸟向大神进阶，那就拿这本书自虐吧。<br><img src="http://upload-images.jianshu.io/upload_images/40592-2b0caeb9fe998f49.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《第一行代码》"><a href="">《第一行代码》</a></h2><p>郭霖大神的书，之前自学，看他的博客也使受益匪浅。书中讲述了Android 中基本的内容，比如四大组件，数据存储，网络请求，数据库等。如果你想快速入门Android，那么这本书你不该错过。<br><img src="http://upload-images.jianshu.io/upload_images/40592-2c5a62efea4e60f1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《Android_Programming:_The_Big_Nerd_Ranch_Guide_(2nd_Edition)（Android_编程：权威指南）》"><a href="">《Android Programming: The Big Nerd Ranch Guide (2nd Edition)（Android 编程：权威指南）》</a></h2><p>这本书是国外知名培训机构Bignerdranch（我想说，这才叫培训机构，国内的xx，我就无力吐槽了） 出的入门书籍，书中以项目为主题，从最项目相关的知识点开始，循序渐进，从最简单的，慢慢来提升。<br><img src="http://upload-images.jianshu.io/upload_images/40592-2fe0a56b324408f2.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《Head_First_Android_Development（深入浅出Android_开发）》"><a href="">《Head First Android Development（深入浅出Android 开发）》</a></h2><p>又一深入浅出系列的书，不过这本好像还没有翻译成中文，书中的内容也是很基础的，和《第一行代码》中讲的内容重合度很高，如果你英文不错，你可以来尝试来读。<br><img src="http://upload-images.jianshu.io/upload_images/40592-7d4eaf9e79b70976.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《Android_群英传》"><a href="">《Android 群英传》</a></h2><p>作者名宜生，在群里被我们唤作医生，不过医生的博客何在慕课网的教学视频，都是非常值得读的，他出的书，也是非常值得看的。作为进阶书，书中不仅将的新手比较难以掌握的View 绘制，性能优化，也讲述Android Studio 的使用和Android 5.0 的新特性。<br><img src="http://upload-images.jianshu.io/upload_images/40592-cdf6c11dfa4663ec.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《Android_开发艺术探索》"><a href="">《Android 开发艺术探索》</a></h2><p>作为新手，从写UI，使用框架，写多了就像小学生交作业一样，也仅仅停留在了只会使用的层面上，那么这本书，则带你去更深次的去理解Android 开发，让你开发更加得心应手，书中讲解View 的工作原理和事件体系，性能分析，深入理解动画，JNI 等等。<br><img src="http://upload-images.jianshu.io/upload_images/40592-8d06b1c699e927d7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《Android_设计模式源码分析》"><a href="">《Android 设计模式源码分析》</a></h2><p>在Android 中，总有一些代码使用感觉很熟悉，比如像AlertDialog，对的，在Android 中一样有大量使用设计模式。这本书深入分析Android 源码中使用到的设计模式。<br><img src="http://upload-images.jianshu.io/upload_images/40592-ed866630bfeca94f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《Android_开发精要》"><a href="">《Android 开发精要》</a></h2><p>作者是豌豆荚Android 负责人范怀宇，书的内容， 从Android 源码中抽次剥茧的“精华”和“要点”，虽然书本不是特别厚，但拿着这本书就像武功宝典，书中的内容吃透了，你就练就了盖世神功。<br><img src="http://upload-images.jianshu.io/upload_images/40592-d03439c94c22ba8c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h2 id="《App_研发录》"><a href="">《App 研发录》</a></h2><p>这本书相对于其他书，这本显得更加特别独特，其他都是讲的纯Android 技术，这本书从更加宏观的角度，讲怎么规范开发，让开发更高效，比如重构，封装网络库，还分析了一些经典的场景，崩溃分析，持续集成（CI）等等。<br><img src="http://upload-images.jianshu.io/upload_images/40592-58c3586a8b4d0dbc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>市面上的书多如牦牛，能发现一本好书也是不易的。上面的书，也希望能为大家Android 开发有一些帮助，当然了，书中的有些内容，随着时间的迁移，书中的内容也会变得落后，所以除了看书，我们也应该时刻关注Android 官方的博客和Android 发布的新版本，还有关注微博上的大牛和订阅一些头条日报来学习新技术。</p>
<hr>
<blockquote>
<p>本文作者：<a href="http://weibo.com/lyf0306" target="_blank" rel="external">Tikitoo</a><br>本文出处：<a href="http://mp.weixin.qq.com/s?__biz=MzA4MTg4MjkzMw==&amp;mid=401674870&amp;idx=1&amp;sn=f71177cb600a78e70a3fa3616e42cc2a#rd" target="_blank" rel="external">Android 开发者必备的书单</a><br>转载请在开头注明<code>作者详细信息</code>和<code>本文出处</code>。</p>
<p>欢迎关注我的微信公众号，分享<code>Android 开发</code>和<code>互联网内容</code>。<br>微信号：<code>AndroidMate</code><br>公众号：<code>安卓同学</code><br><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>大家好，最近一段时间，Android 方面的书籍可谓是百花齐放，这几本书的作者都是在一线互联网公司奋斗的工程师，他们把多年的工作经验，身心耕植，汇聚成一本书。作为菜鸟的我们，只有一睹大神的风采了。所以借这个周末，我也列举了一些书，作为一个Android 开发工程师，这些书都]]>
    </summary>
    
      <category term="android" scheme="http://tikitoo.github.io/tags/android/"/>
    
      <category term="书单" scheme="http://tikitoo.github.io/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2015 年——懵懵懂懂，跌跌撞撞]]></title>
    <link href="http://tikitoo.github.io/2015/12/26/2015-summer/"/>
    <id>http://tikitoo.github.io/2015/12/26/2015-summer/</id>
    <published>2015-12-26T05:35:16.000Z</published>
    <updated>2016-01-07T14:29:06.609Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>如果说2014 年是迷茫，那么2015 年就是懵懂，我希望2016 是成长。</p>
</blockquote>
<h2 id="读过的书">读过的书</h2><p>苏东坡传<br>从零到一<br>硅谷百年史<br>暗时间<br>简明HTTP 指南<br>HTTP 权威指南（未完）<br>Head First Java<br>第一行代码</p>
<h2 id="看过的电影">看过的电影</h2><p>宋家王朝<br>港囧<br>辛亥革命<br>天若有情<br>我是路人甲<br>饮食男女<br>饮食男女（新）<br>重返二十岁<br>罗马假日<br>西西里的美丽传说<br>四大名捕<br>四大名捕2<br>太平轮上<br>卧虎藏龙<br>大上海<br>一个人的武林<br>庞贝末日<br>我想和你好好的<br>分手合约<br>第一次<br>天堂口<br>一路惊喜<br>心花路放<br>宫锁沉香<br>钟馗伏魔：雪妖魔灵<br>模仿游戏<br>重庆森林<br>太极<br>太极2<br>天堂电影院<br>美丽人生</p>
<h2 id="看过的电视剧">看过的电视剧</h2><p>琅琊榜<br>好大一个家<br>京华烟云</p>
<p>发现书没有读过几本，电影几乎快达到每周一部了，电视剧就是感觉很好的才会去看。双十一买了很多书都还没有看多少，不过相对于以前还是好一点，所以与其无聊随便看东西，不如提前把好东西都预备好，觉得自己没事就来看吧，而不是看到好东西，就想过眼云烟一样。</p>
<h2 id="工作">工作</h2><p>今年有两份工作</p>
<p><strong>琥珀天气</strong><br>我自学Android 之后的第一份工作（实习），公司使用很少而且很老的开源库，没有自定义View，代码混乱。并不是说我离开了吐槽公司，我在这个公司整天加班，收获多少，住的地方离得很远，整天劳累我也无力做其他的事情。当然我也并没有多少努力，最后的结果就是我被辞退。<br>第一份实习结束，我又开始找工作了，感觉也挺难找的，一份实习并没有为我加分多少，虽然面试了不少，但是在Java 基础，Android 基础上还是有欠缺，有的公司一上来就给一道算法题，就没有了然后了。</p>
<p><strong>绿葡科技</strong><br>就是我现在的工作，是一个外包公司，也不单单是一个外包公司，还有自己的合作的项目（就是以后的升级迭代都负责），刚开始的一两个项目，进步还是挺大的，也熟悉的逻辑，使用很新很成熟的开源项目和框架，自己代码的质量也有所提高，最近的一段时间相对于比较闲，自己好像也懒散下来了。老大作为技术，这一点对做技术还是会好一点，至少技术这边不会被边缘化。自己做技术也有自己的学习空间。放任的管理就是只能自律，自我学习。</p>
<h2 id="社交">社交</h2><p>微博：粉丝已经达到了2.5k。上半年浪费在了很多时间，下半年理性了很多，别人的微博，要有自己的判断力，然后转发。鸡汤类的基本上都取消了关注。<br>简书：2k，因为一篇关于大学生的App，被简书主页推荐了，余温一直持续到现在，粉丝一直在涨。以后非技术文章还是会在简书上写。<br>知乎：1.1k，也是一两个回答，都有一千左右个赞，现在回答少了，看的也少了，知乎的东西现在受影响的也比较多，所以就是少上。<br>微信公众号：1.1k，微信现在联系人有两百个人，有一般是不认识的吧。有公共号关注者加我的，也有我加别人的，看到别人的生活，对自己也是一个激励吧。<br>Github：几十个关注。这一年基本上什么都没有。</p>
<h2 id="生活">生活</h2><p>多了一台魅蓝Note 2：上一部手机用了两年多，基本也废了。这台也让我体验很多的App，手机作为常用的工具，也不会天天抱着它。<br>Kindle 低配版，一直用它读了几本书，几百块不多读几本书，都亏了。<br>网易云音乐：这是几年发现最好的东西之一吧，烦躁的时候，听听歌，让自己静下来吧。<br>搬了一次家，不太顺利，不过现在环境也适合一个人静静的思考，做一些自己喜欢的使用。<br>现在也偶尔做饭，发现做饭食材的新鲜度和火候都很重要。<br>原来成长就是与自己相处，和自己相处好了，看待四周也就会好了许多。<br>原来有些东西再也回不去了，有些事情，你也不得不做。</p>
<h2 id="认知，眼界">认知，眼界</h2><p>曾经自己认为很崇拜的人，正确的东西，后来发现不是那样。<br>曾经感觉谷歌什么都很好，后来才发现，谷歌也变成了一个大公司，很多产品并不是很好，做的很多实用并不是让人很理解。<br>三观：孔老夫子的儒家思想，几千年后一直在中国人的心中一直扎根生长，三从四德，大男子主义，女人被这个时代弱化等等。我们口口声说男人比女人强，其实都是儒家思想的表现。<br>要么赚很多很多的钱，要么读好多好多的书，要么让自己涨涨阅历，见识。<br>不要让自己局限在当前的周围人中，看看国外发生了什么，看看国外的同行人在做什么，这对以后的选择，会有很多的帮助。<br>如果你认为一个很值得假如的公司，不如提早观察观察吧，这个公司的人，产品，用户，投资人，增长速度，是否快速迭代，创始人整天在做什么，其实选公司就是在追随常创始人。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>如果说2014 年是迷茫，那么2015 年就是懵懂，我希望2016 是成长。</p>
</blockquote>
<h2 id="读过的书">读过的书</h2><p>苏东坡传<br>从零到一<br>硅谷百年史<br>暗时间<br>简明HTTP 指南]]>
    </summary>
    
      <category term="总结" scheme="http://tikitoo.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="生活" scheme="http://tikitoo.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[开发者必备的网站]]></title>
    <link href="http://tikitoo.github.io/2015/11/02/developer-website/"/>
    <id>http://tikitoo.github.io/2015/11/02/developer-website/</id>
    <published>2015-11-02T13:43:09.000Z</published>
    <updated>2016-01-26T14:59:32.022Z</updated>
    <content type="html"><![CDATA[<p>前两天是1024 程序员节，也祝大家过得愉快。本来是想提前写的，一直拖到现在（拖延症致死呀)，所以就大家多等了几天，前两天我写的文章《Android 开发者必备的网站》，今天为大家推荐一些开发者必知的网站，除了一些基本的技术网站，还有一些交流的网站，不多说那就进入正题吧。</p>
<p>我觉得，作为程序员，开发者，科学上网应该就像人的尊严一样，没有它，你写代码都会浑身不舒服。</p>
<h2 id="Google">Google</h2><hr>
<p>不管是新手程序员还是老手程序员，工作和学习过程中都会遇到一些问题，那么遇到问题利用Google 搜索估计是最快解决方案。<br>而且Google 的结果，让你很容易解决问题。关键是Google 不做恶，没广告。</p>
<h2 id="Github">Github</h2><hr>
<p>作为全世界最大的同性交流网站（代码托管平台），上面有各种大牛，作为新手的我只能默默地去撸大牛的代码，期待能和大牛的差距一步步减少。除了学习之外，你也可以利用闲暇的时间来来将自己的开源项目放在上面，从侧面也是对自己的宣传，对找工作也有帮助。<br>类似的有国外的Bitbucket，gitcafe，coding.net 等等。</p>
<h2 id="StackOverflow">StackOverflow</h2><hr>
<p>最大的技术问答网站，Google 搜索技术问题，结果很大的比例都来自StackOverflow，而且可能我们折腾好久的问题，大牛的一句话都点中要害。</p>
<h2 id="HackNews">HackNews</h2><hr>
<p>Hacker News 是一家关于计算机黑客和创业公司的社会化新闻网站，你可以讲自己写的博客或者对一些业界新闻拿出来来讨论。就算自己在上面多看看也是很涨见识的。而且我注意到，国外的很多人的博客都不留评论框，一般写完文章，就会放在HackNews 讨论。国内也有类似的网站。<a href="http://news.dbanotes.net/" target="_blank" rel="external">Startup News</a>。</p>
<h2 id="InfoQ"><a href="http://www.infoq.com/cn/" target="_blank" rel="external">InfoQ</a></h2><hr>
<p>InfoQ 是一个面对开发的服务网站，而他的自我介绍：促进软件开发领域知识与创新的传播。在上面你会看到很多专业人士分享的专业知识，他们分享的东西，可能是一般开发者很难接触到的。由InfoQ 主办的Qcon，ArchSummit 大会，也是非常值得一去的。</p>
<h2 id="V2ex"><a href="http://v2ex.com/" target="_blank" rel="external">V2ex</a></h2><hr>
<p>我觉得V2ex 算是一个程序员吐槽，交流的网站。反正上面由好多好多程序员。而且有个专栏叫《酷工作》，反正由好多求职和招聘的。</p>
<h2 id="SegmentFault"><a href="http://segmentfault.com/" target="_blank" rel="external">SegmentFault</a></h2><hr>
<p>SegmentFault 是一个面向开发者的技术问答社区，你可以在上面问答，写博客，线下交流活动等等。</p>
<h2 id="开源中国">开源中国</h2><hr>
<p>开源中国是目前中国最大的开源技术社区，为IT 开发者提供了一个发现、使用、并交流开源技术的平台。</p>
<h2 id="技术博客">技术博客</h2><hr>
<p>我们在学习过程中，很多时候都是看别人的技术博客来成长的，当然技术博客网站由很多。比如CSDN，cnBlogs，51CTO，itEyes 等等。</p>
<h2 id="Mooc">Mooc</h2><hr>
<p>Mooc 翻译为中文叫做在线网络公开课，Mooc　的愿景是让那些没有机会接受正式教育的人能接受教育，主要做技术的Mooc　也有很多。比如像国外的coursera，edx，udacity，国内由像慕课网，极客学院等等。</p>
<h2 id="开发者服务网站">开发者服务网站</h2><hr>
<p>这个标题可能叫可能叫的不太准确，<br><a href="gold.xitu.io/">稀土掘金</a>：挖掘最优质的互联网技术。它主要邀请一些业界比较资深的开发者，作为联合编辑来推荐文章，文章质量有了保证。<br><a href="http://toutiao.io/" target="_blank" rel="external">开发者头条</a>：程序员的首选阅读分享平台。<br><a href="blog.jobbole.com/">博乐在线</a>：一个专注于IT互联网的聚合分享站点。<br>当然其他的也很多啦，比如像ImportNew，酷勤网等等。</p>
<hr>
<blockquote>
<p>本文作者：<a href="http://weibo.com/lyf0306" target="_blank" rel="external">Tikitoo</a><br>本文出处：<a href="http://www.jianshu.com/p/874ff12a4c01" target="_blank" rel="external">http://www.jianshu.com/p/874ff12a4c01</a><br>转载请在开头注明<code>作者详细信息</code>和<code>本文出处</code>。</p>
<p>欢迎关注我的微信公众号，分享<code>Android 开发</code>和<code>互联网内容</code>。<br>微信号：<code>AndroidMate</code><br>公众号：<code>安卓同学</code><br><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>前两天是1024 程序员节，也祝大家过得愉快。本来是想提前写的，一直拖到现在（拖延症致死呀)，所以就大家多等了几天，前两天我写的文章《Android 开发者必备的网站》，今天为大家推荐一些开发者必知的网站，除了一些基本的技术网站，还有一些交流的网站，不多说那就进入正题吧。<]]>
    </summary>
    
      <category term="website" scheme="http://tikitoo.github.io/tags/website/"/>
    
      <category term="网站" scheme="http://tikitoo.github.io/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio有哪些非常好用的插件？ - Tikitoo 的回答 - 知乎]]></title>
    <link href="http://tikitoo.github.io/2015/09/27/android-studio-the-very-useful-plugins/"/>
    <id>http://tikitoo.github.io/2015/09/27/android-studio-the-very-useful-plugins/</id>
    <published>2015-09-27T11:49:59.000Z</published>
    <updated>2015-09-27T12:01:50.000Z</updated>
    <content type="html"><![CDATA[<p>我要回答了。你们只负责点赞吧。</p>
<p>上面有好多大牛的推荐有很多不错。</p>
<p><strong>Android ButterKnife Zelezny</strong><br>不想写findViewById() 就用ButterKnife，ButterKnife 的注释不想写就用这个插件。</p>
<p><strong>Genymotion</strong><br>用了Genymotion 的虚拟机再也不用系统带的虚拟机了，配合这个插件，可以在Android Studio 直接打开虚拟机。</p>
<p><strong>GsonFormat</strong><br>把 JSON 字符串直接实例化成类，每次想想写Model 类想死的心都有了，有了这个插件Model 类也不用写了。</p>
<p><strong>Fir.im upload</strong><br>使用Fir.im 内测平台很方便有木有。但每次都把文件使用网页上传，不符合我们这么高大上的行业。有了这个插件，上传只用添加token，第一次选择生成的apk 文件的路径，就可以自动上传了。具体教程请看Fir.im 的官方教程。</p>
<blockquote>
<p><a href="http://blog.fir.im/geng-xin-ri-zhi150828/" target="_blank" rel="external">更新日志 - fir.im 回归，上线 Android Studio 插件</a></p>
</blockquote>
<p><strong>Markdown</strong><br>比如我们要写README 的时候，或者其他文档的时候，使用MD 的插件可以预览效果。</p>
<p><strong>CodeGlance</strong><br>在编辑代码最右侧，显示一块代码小地图。</p>
<p><strong>Android Material Design Icon Generator</strong><br>自动生成不同尺寸的Material Design Icon。</p>
<p>PS: Android Studio 1.4 Preview 1 Canary Channel 中添加了Vector Asset 功能，你可以自动添加Material Design Icon 或者自己自定义的SVG 文件，生成VectorDrawables 文件，使用直接引用Drawable 文件。</p>
<p>参考</p>
<ul>
<li><a href="https://www.quora.com/What-are-some-of-the-best-Android-Studio-plugins" target="_blank" rel="external">The best Android Studio plugins</a></li>
<li><a href="https://github.com/judasn/IntelliJ-IDEA-Tutorial/blob/master/plugins-settings.md" target="_blank" rel="external">judasn/IntelliJ-IDEA-Tutorial · GitHub</a></li>
</ul>
<hr>
<blockquote>
<p>本文作者：<a href="http://weibo.com/lyf0306" target="_blank" rel="external">Tikitoo</a><br>本文出处：<a href="http://tikitoo.me/android-studio-the-very-useful-plugins" target="_blank" rel="external">Android Studio有哪些非常好用的插件？</a><br>转载请在开头注明<code>作者详细信息</code>和<code>本文出处</code>。</p>
<p>欢迎关注我的微信公众号，分享<code>Android 开发</code>和<code>互联网内容</code>。<br>微信号：<a href="http://weixin.sogou.com/gzh?openid=oIWsFt0tWyaAMPcOVIEsvZcHnPXA" target="_blank" rel="external">AndroidMate</a><br><img src="http://ww3.sinaimg.cn/mw690/68622377gw1eqmpbo4ugzj209k09kmx3.jpg" alt="安卓同学"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>我要回答了。你们只负责点赞吧。</p>
<p>上面有好多大牛的推荐有很多不错。</p>
<p><strong>Android ButterKnife Zelezny</strong><br>不想写findViewById() 就用ButterKnife，ButterKnif]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="Android Studio" scheme="http://tikitoo.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android Studio live templates 的使用]]></title>
    <link href="http://tikitoo.github.io/2015/09/13/android-studio-live-templates-md/"/>
    <id>http://tikitoo.github.io/2015/09/13/android-studio-live-templates-md/</id>
    <published>2015-09-13T10:22:43.000Z</published>
    <updated>2015-09-13T11:05:58.000Z</updated>
    <content type="html"><![CDATA[<p>在Android Studio 中，我们会发现有时候我们有一些打出一些拼写就会出来一些东西。</p>
<p>比如：<em>psvm</em><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>那么这个是怎么实现的呢？</p>
<p>其实Android Studio 中有一个叫<strong>Live Templates</strong> 的东西。在设置中直接搜索就可以找到。<br>默认的中，系统已经有很多很方便的配置。当然我们也可以自己来编辑。</p>
<p>Bignerdranch 有一篇文章可以来了解看看</p>
<ul>
<li><a href="https://www.bignerdranch.com/blog/android-studio-live-templates/" target="_blank" rel="external">Android Studio Live Templates | Big Nerd Ranch</a></li>
</ul>
<p>更多的详细介绍，可以上IDEA 的官方文档来仔细查看</p>
<ul>
<li><a href="https://www.jetbrains.com/idea/help/live-templates.html" target="_blank" rel="external">Live Templates</a></li>
</ul>
<p>更赞的是，开发大牛把提前配置好的文件放在Github 上了，我等菜鸟就慢慢享用吧。</p>
<ul>
<li><a href="https://github.com/keyboardsurfer/idea-live-templates" target="_blank" rel="external">keyboardsurfer/idea-live-templates</a></li>
</ul>
<p>然后将文件放在下面的文件夹下即可。<br><img src="http://ww3.sinaimg.cn/large/68622377gw1ew10t6z7lyj214f0c0q61.jpg" alt=""></p>
<p>其实还是有点懒，以后有空写一篇详细的教程吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Android Studio 中，我们会发现有时候我们有一些打出一些拼写就会出来一些东西。</p>
<p>比如：<em>psvm</em><br><figure class="highlight java"><table><tr><td class="gutter"><p]]>
    </summary>
    
      <category term="Android Studio" scheme="http://tikitoo.github.io/tags/Android-Studio/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[写给Android 开发的入门教程]]></title>
    <link href="http://tikitoo.github.io/2015/08/23/android-developer-tutorial/"/>
    <id>http://tikitoo.github.io/2015/08/23/android-developer-tutorial/</id>
    <published>2015-08-23T06:45:34.000Z</published>
    <updated>2016-01-26T14:59:52.392Z</updated>
    <content type="html"><![CDATA[<p>之前在知乎上回答的问题——《<a href="http://www.zhihu.com/question/19611325" target="_blank" rel="external">初学者学习 Android 开发，有什么好网站推荐？</a>》，就挑了一些大家公认比较好的资源，所以今天就把它整理成博客了，再好好整理一些好的资料分享给大家。其实我觉得，相对于稍微有点经验的人来说，初学者更需要指导，因为初学者没有好的知识体系，所以会走不少弯路，所以我就以我的经验，和在微博，论坛上大家公认的资料整理出来，也希望能帮到大家。</p>
<hr>
<h2 id="Java">Java</h2><ul>
<li><a href="http://item.jd.com/10100190.html" target="_blank" rel="external">O’Reilly：Head First Java（中文版）</a></li>
<li><a href="http://yun.baidu.com/s/1dD5RRQ5" target="_blank" rel="external">Mars 的Java4Android</a></li>
</ul>
<p>其实我倒觉得，初学者可以读一些浅显易懂的书，在以后的学习中，可以再加以巩固，可以读一些深一点的书。</p>
<hr>
<h2 id="Android_书籍">Android 书籍</h2><ul>
<li><a href="http://item.jd.com/11504254.html" target="_blank" rel="external">郭霖《第一行代码》</a></li>
<li><a href="http://item.jd.com/11431307.html" target="_blank" rel="external">Brian Hardy，Bill Phillips《 Android编程权威指南》</a></li>
</ul>
<p>这两本特别适合初学者开入门的。不管是我自身还是从论坛，微博上，对它们的评论都不错。</p>
<hr>
<h2 id="Android_教程">Android 教程</h2><ul>
<li><a href="http://developer.android.com/training/index.html" target="_blank" rel="external">Android 官方入门指南</a></li>
<li><a href="http://hukai.me/android-training-course-in-chinese/" target="_blank" rel="external">序言 | Android官方培训课程中文版(v0.9.4)</a></li>
<li><a href="https://github.com/codepath/android_guides/wiki" target="_blank" rel="external">Home · codepath/android_guides Wiki · GitHub</a></li>
</ul>
<p>对于教程，我的观点是能读官方，就不要读其他，第二个是官方指南的中文版，算是中文翻译中比较好的了。<br>而Codepath 的入门指南，也可以和官方相比，也是不逊色的，相比较官方的，它的教程更具有实战意义，每一个都是一个小Demo，做完会让你很有成就感。</p>
<hr>
<h2 id="Android_视频">Android 视频</h2><ul>
<li><a href="http://marschen.com/portal.php" target="_blank" rel="external">Mars——Android 开发视频教程</a></li>
<li><a href="http://pan.baidu.com/s/1qWAWU52" target="_blank" rel="external">黎活明——8天快速掌握Android视频</a></li>
<li><a href="http://www.imooc.com/course/programdetail/pid/33" target="_blank" rel="external">慕课网——Android 开发视频</a></li>
<li><a href="http://android.jikexueyuan.com/" target="_blank" rel="external">极客学院——Android开发,安卓开发教程</a></li>
</ul>
<p>这些你都不知道，就有点孤陋寡闻了。</p>
<hr>
<h2 id="Android_开发工具">Android 开发工具</h2><ul>
<li><p><a href="https://github.com/inferjay/AndroidDevTools" target="_blank" rel="external">inferjay/AndroidDevTools</a><br>对于不能科学上网来说，可以使用这里提供的国内镜像来下载各种开发工具和SDK。</p>
</li>
<li><p>Android Studio<br>如果之前还有纠结的话，那么现在你还不使用Android Studio，就说不过去了。Bug 也变得少了，性能优化，版本迭代也特别快。对于以前没有使用过AS 的人来说，当然学习曲线也是比较陡峭的。我推荐两篇文章可以来入门，以后遇到的问题，可以到时候来搜索解决。</p>
<ul>
<li><a href="http://stormzhang.com/" target="_blank" rel="external">Stormzhang - Android Studio系列教程</a></li>
<li><a href="http://www.jianshu.com/p/36cfa1614d23" target="_blank" rel="external">Tikitoo - Android Studio 入门指南</a></li>
</ul>
<hr>
<h2 id="Android_开源App">Android 开源App</h2></li>
<li><a href="https://github.com/googlesamples?utf8=%E2%9C%93&amp;query=android" target="_blank" rel="external">Search Android - Google Samples</a><br>谷歌官方会经常推出一些Android 新技术的Demo，比如每年的IO App 等等。</li>
<li>Android Apidemos<br>下载SDK 之后，会在 <code>&lt;sdk-insall-folder&gt;/samples/</code> 中查看系统自带的好多Demo。</li>
<li><a href="http://www.zhihu.com/question/26687642" target="_blank" rel="external">有没有适合 Android 开发初学者的 App 源码推荐？</a><br>知乎上有好多大牛推荐的，也可以值得关注一下，找到适合自己的来练练手。</li>
</ul>
<hr>
<h2 id="Android_学习经验分享">Android 学习经验分享</h2><p>还有一些大牛对入门者的入门文章，我觉得对于初学者来说，会避免不少弯路。</p>
<ul>
<li><a href="http://www.stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">StormZhang - Android学习之路</a></li>
<li><a href="http://www.jianshu.com/p/2ee0e74abbdf" target="_blank" rel="external">Tikitoo - 我是如何自学Android，资料分享</a></li>
<li><a href="http://drakeet.me/android_base_road" target="_blank" rel="external">Drakeet - 我推荐的 Android 基础学习路线</a></li>
<li><a href="https://github.com/futurice" target="_blank" rel="external">futurice</a><a href="https://github.com/futurice/android-best-practices" target="_blank" rel="external">android-best-practices - Github</a></li>
</ul>
<hr>
<h2 id="总结">总结</h2><p>作为一个程序员，学会科学上网应该是一种本能，这样就会减少很多不必要的麻烦。</p>
<p>要善于利用搜索引擎，StackOverflow。使用英文关键词搜索，你遇到的99% 的问题，别人都会遇到。</p>
<p>要时刻关注Android 的最新动态。比如Android 的官方博客，还有各种Android Weekly，在微博，知乎关注一些Android 牛人，看他们分享的东西和回答的问题，要让自己与时俱进，才不会被淘汰。</p>
<p>加一些QQ 群，有不会可以问问，相互交流。</p>
<p>Alway Be Coding。当敲的代码多了，你的能力才能慢慢提升，切忌眼高手低。</p>
<hr>
<blockquote>
<p>本文作者：<a href="http://weibo.com/lyf0306" target="_blank" rel="external">Tikitoo</a><br>本文出处：<a href="http://tikitoo.me/2015/08/23/android-developer-tutorial/" target="_blank" rel="external">http://tikitoo.me/2015/08/23/android-developer-tutorial/</a><br>转载请在开头注明<code>作者详细信息</code>和<code>本文出处</code>。</p>
<p>欢迎关注我的微信公众号，分享<code>Android 开发</code>和<code>互联网内容</code>。<br>微信号：<code>AndroidMate</code><br>公众号：<code>安卓同学</code><br><img src="http://ww2.sinaimg.cn/large/68622377gw1f00ivyo4lsj20760760t7.jpg" alt="安卓同学"></p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前在知乎上回答的问题——《<a href="http://www.zhihu.com/question/19611325" target="_blank" rel="external">初学者学习 Android 开发，有什么好网站推荐？</a>》，就挑了一些大家公认比较]]>
    </summary>
    
      <category term="Android" scheme="http://tikitoo.github.io/tags/Android/"/>
    
      <category term="Android 入门" scheme="http://tikitoo.github.io/tags/Android-%E5%85%A5%E9%97%A8/"/>
    
      <category term="Android 开发" scheme="http://tikitoo.github.io/tags/Android-%E5%BC%80%E5%8F%91/"/>
    
      <category term="Android 教程" scheme="http://tikitoo.github.io/tags/Android-%E6%95%99%E7%A8%8B/"/>
    
      <category term="自学Android" scheme="http://tikitoo.github.io/tags/%E8%87%AA%E5%AD%A6Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Tikitoo：来使用利器来提高效率吧]]></title>
    <link href="http://tikitoo.github.io/2015/08/03/my-liqi/"/>
    <id>http://tikitoo.github.io/2015/08/03/my-liqi/</id>
    <published>2015-08-03T09:06:11.000Z</published>
    <updated>2015-08-03T09:35:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍一下你自己和所做的工作。">介绍一下你自己和所做的工作。</h2><p>我是梁义发，网络ID 为Tikitoo。我2014 年毕业，后来自学了Android 开发，现在算是入门Android 开发吧。我也是一名互联网爱好者，也爱写文章。</p>
<h2 id="硬件：">硬件：</h2><ul>
<li>一台在大学买的笔记本，安装了Ubuntu，类Unix 还是适合开发的。</li>
<li>Meizu Note 2，觉得魅族的设计，交互体验都不错的。</li>
<li>入门 Kindle，现在也慢慢开始养成读书的习惯了。</li>
<li>其实还是穷呀，以后会入手Macbook，机械键盘，人体工学椅子。我觉得这些在长期看来都会提升幸福感的。</li>
<li>明知道自己在硬件是没有优势，所以就在软件上下工夫了。</li>
</ul>
<h2 id="软件：">软件：</h2><ul>
<li>开发：使用Android Studio，文本编辑器使用Sublime，现在切换到了Atom。使用WIFI ADB 连接Wifi 来测试应用，很实用。当然还有一些小工具就不说了。</li>
<li>效率工具：有Chrome，Evernote，Pocket，Pushbullet，IFTTT，Keep，SimpleNote，这些工具，会让工作学习更高效。</li>
<li>生活中：也会有像快图，Timi 记账，闹钟One，Google 相册，Mailbox，我是个软件控啦，不过这些软件真的让你省心不少。</li>
<li>生活知识类：比如丁香医生，知性，我觉得生活的常识应该去了解的。</li>
</ul>
<h2 id="你最理想的工作环境是什么？">你最理想的工作环境是什么？</h2><p>弹性的工作时间，不太拥挤而且舒适的桌椅，墙上不应该是光秃禿的，包含一些公司的文化是极好的。</p>
<h2 id="你平时获得工作灵感的方式有哪些？">你平时获得工作灵感的方式有哪些？</h2><p>其实作为一个开发人员，最重要的是对自身专业技能的提升，当然也应该对互联网行业的了解，自己也应该有对它的看法。</p>
<ul>
<li>提升专业技能，主要就是看官方文档，学会使用Google，Stackoverflow，也会使用Feedly 订阅博客，也会看像Android Weekly，开发者头条等等。</li>
<li>微博，知乎，会读一些像36Kr，iFanr 的科技博客，来获取互联网信息。</li>
</ul>
<h2 id="推荐一件生活中的利器给大家">推荐一件生活中的利器给大家</h2><p>Keep：Keep 一个健身App，它会提供一些不同难度的健身教程，就算是以前没有锻炼过的人，也没有太多违和感，我也希望作为技术人员，能坚持锻炼身体。</p>
<p><strong>本文参与了「利器社群计划」，发现更多创造者和他们的工具：<a href="http://liqi.io/community" target="_blank" rel="external">http://liqi.io/community/</a></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍一下你自己和所做的工作。">介绍一下你自己和所做的工作。</h2><p>我是梁义发，网络ID 为Tikitoo。我2014 年毕业，后来自学了Android 开发，现在算是入门Android 开发吧。我也是一名互联网爱好者，也爱写文章。</p>
<h2 id=]]>
    </summary>
    
      <category term="Tools" scheme="http://tikitoo.github.io/tags/Tools/"/>
    
      <category term="利器" scheme="http://tikitoo.github.io/tags/%E5%88%A9%E5%99%A8/"/>
    
      <category term="效率" scheme="http://tikitoo.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
</feed>